<?php
/**
 * MailApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Sandbox Ingress (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Tkhamez\Eve\API\ApiException;
use Tkhamez\Eve\API\Configuration;
use Tkhamez\Eve\API\FormDataProcessor;
use Tkhamez\Eve\API\HeaderSelector;
use Tkhamez\Eve\API\ObjectSerializer;

/**
 * MailApi Class Doc Comment
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteCharactersCharacterIdMailLabelsLabelId' => [
            'application/json',
        ],
        'deleteCharactersCharacterIdMailMailId' => [
            'application/json',
        ],
        'getCharactersCharacterIdMail' => [
            'application/json',
        ],
        'getCharactersCharacterIdMailLabels' => [
            'application/json',
        ],
        'getCharactersCharacterIdMailLists' => [
            'application/json',
        ],
        'getCharactersCharacterIdMailMailId' => [
            'application/json',
        ],
        'postCharactersCharacterIdMail' => [
            'application/json',
        ],
        'postCharactersCharacterIdMailLabels' => [
            'application/json',
        ],
        'putCharactersCharacterIdMailMailId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCharactersCharacterIdMailLabelsLabelId
     *
     * Delete a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $label_id label_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Tkhamez\Eve\API\Model\Error
     */
    public function deleteCharactersCharacterIdMailLabelsLabelId($character_id, $label_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'][0])
    {
        list($response) = $this->deleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo($character_id, $label_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation deleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo
     *
     * Delete a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $label_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo($character_id, $label_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'][0])
    {
        $request = $this->deleteCharactersCharacterIdMailLabelsLabelIdRequest($character_id, $label_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteCharactersCharacterIdMailLabelsLabelIdAsync
     *
     * Delete a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $label_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCharactersCharacterIdMailLabelsLabelIdAsync($character_id, $label_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'][0])
    {
        return $this->deleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo($character_id, $label_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo
     *
     * Delete a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $label_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCharactersCharacterIdMailLabelsLabelIdAsyncWithHttpInfo($character_id, $label_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteCharactersCharacterIdMailLabelsLabelIdRequest($character_id, $label_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCharactersCharacterIdMailLabelsLabelId'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $label_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCharactersCharacterIdMailLabelsLabelIdRequest($character_id, $label_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailLabelsLabelId'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling deleteCharactersCharacterIdMailLabelsLabelId'
            );
        }

        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling deleteCharactersCharacterIdMailLabelsLabelId'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling deleteCharactersCharacterIdMailLabelsLabelId'
            );
        }





        $resourcePath = '/characters/{character_id}/mail/labels/{label_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'label_id' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailId
     *
     * Delete a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Tkhamez\Eve\API\Model\Error
     */
    public function deleteCharactersCharacterIdMailMailId($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailMailId'][0])
    {
        list($response) = $this->deleteCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Delete a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailMailId'][0])
    {
        $request = $this->deleteCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailIdAsync
     *
     * Delete a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCharactersCharacterIdMailMailIdAsync($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailMailId'][0])
    {
        return $this->deleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo
     *
     * Delete a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailMailId'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCharactersCharacterIdMailMailId'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteCharactersCharacterIdMailMailId'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling deleteCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'mail_id' is set
        if ($mail_id === null || (is_array($mail_id) && count($mail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_id when calling deleteCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling deleteCharactersCharacterIdMailMailId'
            );
        }





        $resourcePath = '/characters/{character_id}/mail/{mail_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
        // path params
        if ($mail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mail_id' . '}',
                ObjectSerializer::toPathValue($mail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdMail
     *
     * Return mail headers
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  int[]|null $labels labels (optional)
     * @param  int|null $last_mail_id last_mail_id (optional)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]|\Tkhamez\Eve\API\Model\Error
     */
    public function getCharactersCharacterIdMail($character_id, $x_compatibility_date, $labels = null, $last_mail_id = null, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMail'][0])
    {
        list($response) = $this->getCharactersCharacterIdMailWithHttpInfo($character_id, $x_compatibility_date, $labels, $last_mail_id, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailWithHttpInfo
     *
     * Return mail headers
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  int[]|null $labels (optional)
     * @param  int|null $last_mail_id (optional)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailWithHttpInfo($character_id, $x_compatibility_date, $labels = null, $last_mail_id = null, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMail'][0])
    {
        $request = $this->getCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $labels, $last_mail_id, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailAsync
     *
     * Return mail headers
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  int[]|null $labels (optional)
     * @param  int|null $last_mail_id (optional)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailAsync($character_id, $x_compatibility_date, $labels = null, $last_mail_id = null, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMail'][0])
    {
        return $this->getCharactersCharacterIdMailAsyncWithHttpInfo($character_id, $x_compatibility_date, $labels, $last_mail_id, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdMailAsyncWithHttpInfo
     *
     * Return mail headers
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  int[]|null $labels (optional)
     * @param  int|null $last_mail_id (optional)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailAsyncWithHttpInfo($character_id, $x_compatibility_date, $labels = null, $last_mail_id = null, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMail'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailGetInner[]';
        $request = $this->getCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $labels, $last_mail_id, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdMail'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  int[]|null $labels (optional)
     * @param  int|null $last_mail_id (optional)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $labels = null, $last_mail_id = null, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMail'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdMail'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling getCharactersCharacterIdMail'
            );
        }

        if ($labels !== null && count($labels) > 25) {
            throw new \InvalidArgumentException('invalid value for "$labels" when calling MailApi.getCharactersCharacterIdMail, number of items must be less than or equal to 25.');
        }
        if ($labels !== null && count($labels) < 1) {
            throw new \InvalidArgumentException('invalid value for "$labels" when calling MailApi.getCharactersCharacterIdMail, number of items must be greater than or equal to 1.');
        }
        





        $resourcePath = '/characters/{character_id}/mail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels,
            'labels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_mail_id,
            'last_mail_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdMailLabels
     *
     * Get mail labels and unread counts
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet|\Tkhamez\Eve\API\Model\Error
     */
    public function getCharactersCharacterIdMailLabels($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLabels'][0])
    {
        list($response) = $this->getCharactersCharacterIdMailLabelsWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailLabelsWithHttpInfo
     *
     * Get mail labels and unread counts
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailLabelsWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLabels'][0])
    {
        $request = $this->getCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailLabelsAsync
     *
     * Get mail labels and unread counts
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailLabelsAsync($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLabels'][0])
    {
        return $this->getCharactersCharacterIdMailLabelsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdMailLabelsAsyncWithHttpInfo
     *
     * Get mail labels and unread counts
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailLabelsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLabels'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailLabelsGet';
        $request = $this->getCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdMailLabels'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLabels'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdMailLabels'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling getCharactersCharacterIdMailLabels'
            );
        }





        $resourcePath = '/characters/{character_id}/mail/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdMailLists
     *
     * Return mailing list subscriptions
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLists'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]|\Tkhamez\Eve\API\Model\Error
     */
    public function getCharactersCharacterIdMailLists($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLists'][0])
    {
        list($response) = $this->getCharactersCharacterIdMailListsWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailListsWithHttpInfo
     *
     * Return mailing list subscriptions
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLists'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailListsWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLists'][0])
    {
        $request = $this->getCharactersCharacterIdMailListsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailListsAsync
     *
     * Return mailing list subscriptions
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailListsAsync($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLists'][0])
    {
        return $this->getCharactersCharacterIdMailListsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdMailListsAsyncWithHttpInfo
     *
     * Return mailing list subscriptions
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailListsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLists'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailListsGetInner[]';
        $request = $this->getCharactersCharacterIdMailListsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdMailLists'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdMailListsRequest($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailLists'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdMailLists'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling getCharactersCharacterIdMailLists'
            );
        }





        $resourcePath = '/characters/{character_id}/mail/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdMailMailId
     *
     * Return a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet|\Tkhamez\Eve\API\Model\Error
     */
    public function getCharactersCharacterIdMailMailId($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailMailId'][0])
    {
        list($response) = $this->getCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Return a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailMailId'][0])
    {
        $request = $this->getCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailMailIdAsync
     *
     * Return a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailMailIdAsync($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailMailId'][0])
    {
        return $this->getCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdMailMailIdAsyncWithHttpInfo
     *
     * Return a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailMailId'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\CharactersCharacterIdMailMailIdGet';
        $request = $this->getCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdMailMailId'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdMailMailId'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'mail_id' is set
        if ($mail_id === null || (is_array($mail_id) && count($mail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_id when calling getCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling getCharactersCharacterIdMailMailId'
            );
        }





        $resourcePath = '/characters/{character_id}/mail/{mail_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
        // path params
        if ($mail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mail_id' . '}',
                ObjectSerializer::toPathValue($mail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCharactersCharacterIdMail
     *
     * Send a new mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailRequest|null $post_characters_character_id_mail_request post_characters_character_id_mail_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int|\Tkhamez\Eve\API\Model\Error
     */
    public function postCharactersCharacterIdMail($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMail'][0])
    {
        list($response) = $this->postCharactersCharacterIdMailWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_request, $contentType);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdMailWithHttpInfo
     *
     * Send a new mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailRequest|null $post_characters_character_id_mail_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdMailWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMail'][0])
    {
        $request = $this->postCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'int',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdMailAsync
     *
     * Send a new mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailRequest|null $post_characters_character_id_mail_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdMailAsync($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMail'][0])
    {
        return $this->postCharactersCharacterIdMailAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCharactersCharacterIdMailAsyncWithHttpInfo
     *
     * Send a new mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailRequest|null $post_characters_character_id_mail_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdMailAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMail'][0])
    {
        $returnType = 'int';
        $request = $this->postCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCharactersCharacterIdMail'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailRequest|null $post_characters_character_id_mail_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCharactersCharacterIdMailRequest($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMail'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling postCharactersCharacterIdMail'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling postCharactersCharacterIdMail'
            );
        }






        $resourcePath = '/characters/{character_id}/mail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_characters_character_id_mail_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_characters_character_id_mail_request));
            } else {
                $httpBody = $post_characters_character_id_mail_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCharactersCharacterIdMailLabels
     *
     * Create a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailLabelsRequest|null $post_characters_character_id_mail_labels_request post_characters_character_id_mail_labels_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int|\Tkhamez\Eve\API\Model\Error
     */
    public function postCharactersCharacterIdMailLabels($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_labels_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMailLabels'][0])
    {
        list($response) = $this->postCharactersCharacterIdMailLabelsWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_labels_request, $contentType);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdMailLabelsWithHttpInfo
     *
     * Create a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailLabelsRequest|null $post_characters_character_id_mail_labels_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdMailLabelsWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_labels_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMailLabels'][0])
    {
        $request = $this->postCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_labels_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'int',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdMailLabelsAsync
     *
     * Create a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailLabelsRequest|null $post_characters_character_id_mail_labels_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdMailLabelsAsync($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_labels_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMailLabels'][0])
    {
        return $this->postCharactersCharacterIdMailLabelsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_labels_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCharactersCharacterIdMailLabelsAsyncWithHttpInfo
     *
     * Create a mail label
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailLabelsRequest|null $post_characters_character_id_mail_labels_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdMailLabelsAsyncWithHttpInfo($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_labels_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMailLabels'][0])
    {
        $returnType = 'int';
        $request = $this->postCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $post_characters_character_id_mail_labels_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCharactersCharacterIdMailLabels'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PostCharactersCharacterIdMailLabelsRequest|null $post_characters_character_id_mail_labels_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdMailLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCharactersCharacterIdMailLabelsRequest($character_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $post_characters_character_id_mail_labels_request = null, string $contentType = self::contentTypes['postCharactersCharacterIdMailLabels'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling postCharactersCharacterIdMailLabels'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling postCharactersCharacterIdMailLabels'
            );
        }






        $resourcePath = '/characters/{character_id}/mail/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_characters_character_id_mail_labels_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_characters_character_id_mail_labels_request));
            } else {
                $httpBody = $post_characters_character_id_mail_labels_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCharactersCharacterIdMailMailId
     *
     * Update metadata about a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PutCharactersCharacterIdMailMailIdRequest|null $put_characters_character_id_mail_mail_id_request put_characters_character_id_mail_mail_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Tkhamez\Eve\API\Model\Error
     */
    public function putCharactersCharacterIdMailMailId($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $put_characters_character_id_mail_mail_id_request = null, string $contentType = self::contentTypes['putCharactersCharacterIdMailMailId'][0])
    {
        list($response) = $this->putCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $put_characters_character_id_mail_mail_id_request, $contentType);
        return $response;
    }

    /**
     * Operation putCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Update metadata about a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PutCharactersCharacterIdMailMailIdRequest|null $put_characters_character_id_mail_mail_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCharactersCharacterIdMailMailIdWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $put_characters_character_id_mail_mail_id_request = null, string $contentType = self::contentTypes['putCharactersCharacterIdMailMailId'][0])
    {
        $request = $this->putCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $put_characters_character_id_mail_mail_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putCharactersCharacterIdMailMailIdAsync
     *
     * Update metadata about a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PutCharactersCharacterIdMailMailIdRequest|null $put_characters_character_id_mail_mail_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCharactersCharacterIdMailMailIdAsync($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $put_characters_character_id_mail_mail_id_request = null, string $contentType = self::contentTypes['putCharactersCharacterIdMailMailId'][0])
    {
        return $this->putCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $put_characters_character_id_mail_mail_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCharactersCharacterIdMailMailIdAsyncWithHttpInfo
     *
     * Update metadata about a mail
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PutCharactersCharacterIdMailMailIdRequest|null $put_characters_character_id_mail_mail_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCharactersCharacterIdMailMailIdAsyncWithHttpInfo($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $put_characters_character_id_mail_mail_id_request = null, string $contentType = self::contentTypes['putCharactersCharacterIdMailMailId'][0])
    {
        $returnType = 'mixed';
        $request = $this->putCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language, $if_none_match, $x_tenant, $put_characters_character_id_mail_mail_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCharactersCharacterIdMailMailId'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  int $mail_id (required)
     * @param  \DateTime $x_compatibility_date The compatibility date for the request. (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  \Tkhamez\Eve\API\Model\PutCharactersCharacterIdMailMailIdRequest|null $put_characters_character_id_mail_mail_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdMailMailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCharactersCharacterIdMailMailIdRequest($character_id, $mail_id, $x_compatibility_date, $accept_language = 'en', $if_none_match = null, $x_tenant = 'tranquility', $put_characters_character_id_mail_mail_id_request = null, string $contentType = self::contentTypes['putCharactersCharacterIdMailMailId'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling putCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'mail_id' is set
        if ($mail_id === null || (is_array($mail_id) && count($mail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_id when calling putCharactersCharacterIdMailMailId'
            );
        }

        // verify the required parameter 'x_compatibility_date' is set
        if ($x_compatibility_date === null || (is_array($x_compatibility_date) && count($x_compatibility_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_compatibility_date when calling putCharactersCharacterIdMailMailId'
            );
        }






        $resourcePath = '/characters/{character_id}/mail/{mail_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
        // path params
        if ($mail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mail_id' . '}',
                ObjectSerializer::toPathValue($mail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_characters_character_id_mail_mail_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_characters_character_id_mail_mail_id_request));
            } else {
                $httpBody = $put_characters_character_id_mail_mail_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
