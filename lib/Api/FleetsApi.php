<?php
/**
 * FleetsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\Eve\ApiException;
use Swagger\Client\Eve\Configuration;
use Swagger\Client\Eve\HeaderSelector;
use Swagger\Client\Eve\ObjectSerializer;

/**
 * FleetsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FleetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteFleetsFleetIdMembersMemberId' => [
            'application/json',
        ],
        'deleteFleetsFleetIdSquadsSquadId' => [
            'application/json',
        ],
        'deleteFleetsFleetIdWingsWingId' => [
            'application/json',
        ],
        'getCharactersCharacterIdFleet' => [
            'application/json',
        ],
        'getFleetsFleetId' => [
            'application/json',
        ],
        'getFleetsFleetIdMembers' => [
            'application/json',
        ],
        'getFleetsFleetIdWings' => [
            'application/json',
        ],
        'postFleetsFleetIdMembers' => [
            'application/json',
        ],
        'postFleetsFleetIdWings' => [
            'application/json',
        ],
        'postFleetsFleetIdWingsWingIdSquads' => [
            'application/json',
        ],
        'putFleetsFleetId' => [
            'application/json',
        ],
        'putFleetsFleetIdMembersMemberId' => [
            'application/json',
        ],
        'putFleetsFleetIdSquadsSquadId' => [
            'application/json',
        ],
        'putFleetsFleetIdWingsWingId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberId
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdMembersMemberId($fleet_id, $member_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $this->deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $datasource, $token, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\DeleteFleetsFleetIdMembersMemberIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsync
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        return $this->deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/members/{member_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadId
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdSquadsSquadId($fleet_id, $squad_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $this->deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $datasource, $token, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\DeleteFleetsFleetIdSquadsSquadIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsync
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsync($fleet_id, $squad_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        return $this->deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/squads/{squad_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingId
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdWingsWingId($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $this->deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $datasource, $token, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\DeleteFleetsFleetIdWingsWingIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsync
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsync($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        return $this->deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdFleet
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdFleet($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        list($response) = $this->getCharactersCharacterIdFleetWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdFleetWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdFleetWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdFleetAsync
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsync($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        return $this->getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdFleetAsyncWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCharactersCharacterIdFleetOk';
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdFleet'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdFleetRequest($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdFleet'
            );
        }
        if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling FleetsApi.getCharactersCharacterIdFleet, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/characters/{character_id}/fleet/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetId
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetFleetsFleetIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getFleetsFleetId($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        list($response) = $this->getFleetsFleetIdWithHttpInfo($fleet_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetFleetsFleetIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWithHttpInfo($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        $request = $this->getFleetsFleetIdRequest($fleet_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdOk' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdOk' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdOk', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdOk';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdAsync
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsync($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        return $this->getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdAsyncWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdOk';
        $request = $this->getFleetsFleetIdRequest($fleet_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdRequest($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetId'
            );
        }





        $resourcePath = '/v1/fleets/{fleet_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdMembers
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getFleetsFleetIdMembers($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        list($response) = $this->getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdMembersWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembersNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdMembersAsync
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsync($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        return $this->getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdMembers200Ok[]';
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdMembers'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdMembersRequest($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdMembers'
            );
        }







        $resourcePath = '/v1/fleets/{fleet_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdWings
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getFleetsFleetIdWings($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        list($response) = $this->getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWingsWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetFleetsFleetIdWingsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdWingsAsync
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsync($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        return $this->getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetFleetsFleetIdWings200Ok[]';
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdWings'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to 'en')
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdWingsRequest($fleet_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $token = null, string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdWings'
            );
        }







        $resourcePath = '/v1/fleets/{fleet_id}/wings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdMembers
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postFleetsFleetIdMembers($fleet_id, $invitation, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $this->postFleetsFleetIdMembersWithHttpInfo($fleet_id, $invitation, $datasource, $token, $contentType);
    }

    /**
     * Operation postFleetsFleetIdMembersWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdMembersWithHttpInfo($fleet_id, $invitation, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdMembersNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdMembersUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdMembersAsync
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsync($fleet_id, $invitation, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        return $this->postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $invitation, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $invitation, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $returnType = '';
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdMembers'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdMembers'
            );
        }

        // verify the required parameter 'invitation' is set
        if ($invitation === null || (is_array($invitation) && count($invitation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invitation when calling postFleetsFleetIdMembers'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invitation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invitation));
            } else {
                $httpBody = $invitation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWings
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function postFleetsFleetIdWings($fleet_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        list($response) = $this->postFleetsFleetIdWingsWithHttpInfo($fleet_id, $datasource, $token, $contentType);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWithHttpInfo($fleet_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsAsync
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsync($fleet_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        return $this->postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsCreated';
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWings'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdWingsRequest($fleet_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWings'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/wings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquads
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function postFleetsFleetIdWingsWingIdSquads($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        list($response) = $this->postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $datasource, $token, $contentType);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Swagger\Client\Eve\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\BadRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Swagger\Client\Eve\Model\Unauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Unauthorized' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Unauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Swagger\Client\Eve\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\Forbidden' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 420:
                    if ('\Swagger\Client\Eve\Model\ErrorLimited' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ErrorLimited' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ErrorLimited', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Swagger\Client\Eve\Model\InternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\InternalServerError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\InternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Swagger\Client\Eve\Model\ServiceUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\ServiceUnavailable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\ServiceUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if ('\Swagger\Client\Eve\Model\GatewayTimeout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Swagger\Client\Eve\Model\GatewayTimeout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Swagger\Client\Eve\Model\GatewayTimeout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsync
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsync($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        return $this->postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\PostFleetsFleetIdWingsWingIdSquadsCreated';
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWingsWingIdSquads'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/squads/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetId
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetId($fleet_id, $new_settings, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $this->putFleetsFleetIdWithHttpInfo($fleet_id, $new_settings, $datasource, $token, $contentType);
    }

    /**
     * Operation putFleetsFleetIdWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWithHttpInfo($fleet_id, $new_settings, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $request = $this->putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PutFleetsFleetIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdAsync
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsync($fleet_id, $new_settings, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        return $this->putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $new_settings, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdAsyncWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $new_settings, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetId'
            );
        }

        // verify the required parameter 'new_settings' is set
        if ($new_settings === null || (is_array($new_settings) && count($new_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_settings when calling putFleetsFleetId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_settings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_settings));
            } else {
                $httpBody = $new_settings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberId
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdMembersMemberId($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $this->putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $movement, $datasource, $token, $contentType);
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsync
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        return $this->putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $movement, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling putFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'movement' is set
        if ($movement === null || (is_array($movement) && count($movement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movement when calling putFleetsFleetIdMembersMemberId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/members/{member_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($movement)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($movement));
            } else {
                $httpBody = $movement;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadId
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdSquadsSquadId($fleet_id, $squad_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $this->putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $naming, $datasource, $token, $contentType);
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $naming, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsync
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsync($fleet_id, $squad_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        return $this->putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $naming, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $naming, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'naming' is set
        if ($naming === null || (is_array($naming) && count($naming) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $naming when calling putFleetsFleetIdSquadsSquadId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/squads/{squad_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($naming)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($naming));
            } else {
                $httpBody = $naming;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdWingsWingId
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdWingsWingId($fleet_id, $wing_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $this->putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $naming, $datasource, $token, $contentType);
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $naming, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsync
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsync($fleet_id, $wing_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        return $this->putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $naming, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $naming, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  \Swagger\Client\Eve\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  string $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $naming, $datasource = 'tranquility', $token = null, string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling putFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'naming' is set
        if ($naming === null || (is_array($naming) && count($naming) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $naming when calling putFleetsFleetIdWingsWingId'
            );
        }




        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($naming)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($naming));
            } else {
                $httpBody = $naming;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
