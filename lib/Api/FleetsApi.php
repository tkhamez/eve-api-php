<?php
/**
 * FleetsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-09-30
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Tkhamez\Eve\API\ApiException;
use Tkhamez\Eve\API\Configuration;
use Tkhamez\Eve\API\FormDataProcessor;
use Tkhamez\Eve\API\HeaderSelector;
use Tkhamez\Eve\API\ObjectSerializer;

/**
 * FleetsApi Class Doc Comment
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FleetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteFleetsFleetIdMembersMemberId' => [
            'application/json',
        ],
        'deleteFleetsFleetIdSquadsSquadId' => [
            'application/json',
        ],
        'deleteFleetsFleetIdWingsWingId' => [
            'application/json',
        ],
        'getCharactersCharacterIdFleet' => [
            'application/json',
        ],
        'getFleetsFleetId' => [
            'application/json',
        ],
        'getFleetsFleetIdMembers' => [
            'application/json',
        ],
        'getFleetsFleetIdWings' => [
            'application/json',
        ],
        'postFleetsFleetIdMembers' => [
            'application/json',
        ],
        'postFleetsFleetIdWings' => [
            'application/json',
        ],
        'postFleetsFleetIdWingsWingIdSquads' => [
            'application/json',
        ],
        'putFleetsFleetId' => [
            'application/json',
        ],
        'putFleetsFleetIdMembersMemberId' => [
            'application/json',
        ],
        'putFleetsFleetIdSquadsSquadId' => [
            'application/json',
        ],
        'putFleetsFleetIdWingsWingId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberId
     *
     * Kick fleet member
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $member_id member_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdMembersMemberId($fleet_id, $member_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $this->deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsync
     *
     * Kick fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        return $this->deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdMembersMemberId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/members/{member_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadId
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $squad_id squad_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdSquadsSquadId($fleet_id, $squad_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $this->deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsync
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsync($fleet_id, $squad_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        return $this->deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdSquadsSquadId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/squads/{squad_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingId
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $wing_id wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdWingsWingId($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $this->deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsync
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsync($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        return $this->deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['deleteFleetsFleetIdWingsWingId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/wings/{wing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdFleet
     *
     * Get character fleet info
     *
     * @param  int $character_id The ID of the character (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet|\Tkhamez\Eve\API\Model\Error
     */
    public function getCharactersCharacterIdFleet($character_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        list($response) = $this->getCharactersCharacterIdFleetWithHttpInfo($character_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdFleetWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id The ID of the character (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdFleetWithHttpInfo($character_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdFleetAsync
     *
     * Get character fleet info
     *
     * @param  int $character_id The ID of the character (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsync($character_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        return $this->getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdFleetAsyncWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id The ID of the character (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\CharactersCharacterIdFleetGet';
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdFleet'
     *
     * @param  int $character_id The ID of the character (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdFleet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdFleetRequest($character_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getCharactersCharacterIdFleet'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdFleet'
            );
        }






        $resourcePath = '/characters/{character_id}/fleet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetId
     *
     * Get fleet information
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\FleetsFleetIdGet|\Tkhamez\Eve\API\Model\Error
     */
    public function getFleetsFleetId($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        list($response) = $this->getFleetsFleetIdWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\FleetsFleetIdGet|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        $request = $this->getFleetsFleetIdRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdGet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\FleetsFleetIdGet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdAsync
     *
     * Get fleet information
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsync($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        return $this->getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdAsyncWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\FleetsFleetIdGet';
        $request = $this->getFleetsFleetIdRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetId'
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdRequest($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdMembers
     *
     * Get fleet members
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]|\Tkhamez\Eve\API\Model\Error
     */
    public function getFleetsFleetIdMembers($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        list($response) = $this->getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdMembersWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdMembersAsync
     *
     * Get fleet members
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsync($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        return $this->getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\FleetsFleetIdMembersGetInner[]';
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdMembers'
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdMembersRequest($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdMembers'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdMembers'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdWings
     *
     * Get fleet wings
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]|\Tkhamez\Eve\API\Model\Error
     */
    public function getFleetsFleetIdWings($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        list($response) = $this->getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWingsWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdWingsAsync
     *
     * Get fleet wings
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsync($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        return $this->getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsGetInner[]';
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdWings'
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFleetsFleetIdWingsRequest($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['getFleetsFleetIdWings'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdWings'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/wings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdMembers
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PostFleetsFleetIdMembersRequest $post_fleets_fleet_id_members_request post_fleets_fleet_id_members_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postFleetsFleetIdMembers($fleet_id, $post_fleets_fleet_id_members_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $this->postFleetsFleetIdMembersWithHttpInfo($fleet_id, $post_fleets_fleet_id_members_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation postFleetsFleetIdMembersWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PostFleetsFleetIdMembersRequest $post_fleets_fleet_id_members_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdMembersWithHttpInfo($fleet_id, $post_fleets_fleet_id_members_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $post_fleets_fleet_id_members_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdMembersAsync
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PostFleetsFleetIdMembersRequest $post_fleets_fleet_id_members_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsync($fleet_id, $post_fleets_fleet_id_members_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        return $this->postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $post_fleets_fleet_id_members_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PostFleetsFleetIdMembersRequest $post_fleets_fleet_id_members_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $post_fleets_fleet_id_members_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {
        $returnType = '';
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $post_fleets_fleet_id_members_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdMembers'
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PostFleetsFleetIdMembersRequest $post_fleets_fleet_id_members_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdMembersRequest($fleet_id, $post_fleets_fleet_id_members_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdMembers'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdMembers'
            );
        }

        // verify the required parameter 'post_fleets_fleet_id_members_request' is set
        if ($post_fleets_fleet_id_members_request === null || (is_array($post_fleets_fleet_id_members_request) && count($post_fleets_fleet_id_members_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_fleets_fleet_id_members_request when calling postFleetsFleetIdMembers'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_fleets_fleet_id_members_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_fleets_fleet_id_members_request));
            } else {
                $httpBody = $post_fleets_fleet_id_members_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWings
     *
     * Create fleet wing
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost|\Tkhamez\Eve\API\Model\Error
     */
    public function postFleetsFleetIdWings($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        list($response) = $this->postFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsAsync
     *
     * Create fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsync($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        return $this->postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsPost';
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWings'
     *
     * @param  int $fleet_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdWingsRequest($fleet_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWings'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWings'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/wings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquads
     *
     * Create fleet squad
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $wing_id wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost|\Tkhamez\Eve\API\Model\Error
     */
    public function postFleetsFleetIdWingsWingIdSquads($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        list($response) = $this->postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost|\Tkhamez\Eve\API\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Tkhamez\Eve\API\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsync
     *
     * Create fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsync($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        return $this->postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {
        $returnType = '\Tkhamez\Eve\API\Model\FleetsFleetIdWingsWingIdSquadsPost';
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWingsWingIdSquads'
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFleetsFleetIdWingsWingIdSquads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['postFleetsFleetIdWingsWingIdSquads'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/wings/{wing_id}/squads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetId
     *
     * Update fleet
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdRequest $put_fleets_fleet_id_request put_fleets_fleet_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetId($fleet_id, $put_fleets_fleet_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $this->putFleetsFleetIdWithHttpInfo($fleet_id, $put_fleets_fleet_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation putFleetsFleetIdWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdRequest $put_fleets_fleet_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWithHttpInfo($fleet_id, $put_fleets_fleet_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $request = $this->putFleetsFleetIdRequest($fleet_id, $put_fleets_fleet_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdAsync
     *
     * Update fleet
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdRequest $put_fleets_fleet_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsync($fleet_id, $put_fleets_fleet_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        return $this->putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $put_fleets_fleet_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdAsyncWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdRequest $put_fleets_fleet_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $put_fleets_fleet_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdRequest($fleet_id, $put_fleets_fleet_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetId'
     *
     * @param  int $fleet_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdRequest $put_fleets_fleet_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdRequest($fleet_id, $put_fleets_fleet_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetId'
            );
        }

        // verify the required parameter 'put_fleets_fleet_id_request' is set
        if ($put_fleets_fleet_id_request === null || (is_array($put_fleets_fleet_id_request) && count($put_fleets_fleet_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_fleets_fleet_id_request when calling putFleetsFleetId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_fleets_fleet_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_fleets_fleet_id_request));
            } else {
                $httpBody = $put_fleets_fleet_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberId
     *
     * Move fleet member
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $member_id member_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdMembersMemberIdRequest $put_fleets_fleet_id_members_member_id_request put_fleets_fleet_id_members_member_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdMembersMemberId($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $this->putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdMembersMemberIdRequest $put_fleets_fleet_id_members_member_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsync
     *
     * Move fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdMembersMemberIdRequest $put_fleets_fleet_id_members_member_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        return $this->putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdMembersMemberIdRequest $put_fleets_fleet_id_members_member_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id (required)
     * @param  int $member_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdMembersMemberIdRequest $put_fleets_fleet_id_members_member_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdMembersMemberId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $put_fleets_fleet_id_members_member_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdMembersMemberId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling putFleetsFleetIdMembersMemberId'
            );
        }

        // verify the required parameter 'put_fleets_fleet_id_members_member_id_request' is set
        if ($put_fleets_fleet_id_members_member_id_request === null || (is_array($put_fleets_fleet_id_members_member_id_request) && count($put_fleets_fleet_id_members_member_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_fleets_fleet_id_members_member_id_request when calling putFleetsFleetIdMembersMemberId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/members/{member_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_fleets_fleet_id_members_member_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_fleets_fleet_id_members_member_id_request));
            } else {
                $httpBody = $put_fleets_fleet_id_members_member_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadId
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $squad_id squad_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdSquadsSquadId($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $this->putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsync
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsync($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        return $this->putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id (required)
     * @param  int $squad_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdSquadsSquadId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdSquadsSquadId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }

        // verify the required parameter 'put_fleets_fleet_id_squads_squad_id_request' is set
        if ($put_fleets_fleet_id_squads_squad_id_request === null || (is_array($put_fleets_fleet_id_squads_squad_id_request) && count($put_fleets_fleet_id_squads_squad_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_fleets_fleet_id_squads_squad_id_request when calling putFleetsFleetIdSquadsSquadId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/squads/{squad_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_fleets_fleet_id_squads_squad_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_fleets_fleet_id_squads_squad_id_request));
            } else {
                $httpBody = $put_fleets_fleet_id_squads_squad_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdWingsWingId
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id fleet_id (required)
     * @param  int $wing_id wing_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdWingsWingId($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $this->putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \Tkhamez\Eve\API\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tkhamez\Eve\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsync
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsync($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        return $this->putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language, $if_none_match, $x_compatibility_date, $x_tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id (required)
     * @param  int $wing_id (required)
     * @param  \Tkhamez\Eve\API\Model\PutFleetsFleetIdSquadsSquadIdRequest $put_fleets_fleet_id_squads_squad_id_request (required)
     * @param  string|null $accept_language The language to use for the response. (optional, default to 'en')
     * @param  string|null $if_none_match The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)
     * @param  string|null $x_compatibility_date The compatibility date for the request. (optional, default to '2025-09-30')
     * @param  string|null $x_tenant The tenant ID for the request. (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFleetsFleetIdWingsWingId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $put_fleets_fleet_id_squads_squad_id_request, $accept_language = 'en', $if_none_match = null, $x_compatibility_date = '2025-09-30', $x_tenant = 'tranquility', string $contentType = self::contentTypes['putFleetsFleetIdWingsWingId'][0])
    {

        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling putFleetsFleetIdWingsWingId'
            );
        }

        // verify the required parameter 'put_fleets_fleet_id_squads_squad_id_request' is set
        if ($put_fleets_fleet_id_squads_squad_id_request === null || (is_array($put_fleets_fleet_id_squads_squad_id_request) && count($put_fleets_fleet_id_squads_squad_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_fleets_fleet_id_squads_squad_id_request when calling putFleetsFleetIdWingsWingId'
            );
        }






        $resourcePath = '/fleets/{fleet_id}/wings/{wing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($x_compatibility_date !== null) {
            $headerParams['X-Compatibility-Date'] = ObjectSerializer::toHeaderValue($x_compatibility_date);
        }
        // header params
        if ($x_tenant !== null) {
            $headerParams['X-Tenant'] = ObjectSerializer::toHeaderValue($x_tenant);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_fleets_fleet_id_squads_squad_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_fleets_fleet_id_squads_squad_id_request));
            } else {
                $httpBody = $put_fleets_fleet_id_squads_squad_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
