<?php
/**
 * SkillsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.36
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Swagger\Client\Eve\ApiException;
use Swagger\Client\Eve\Configuration;
use Swagger\Client\Eve\FormDataProcessor;
use Swagger\Client\Eve\HeaderSelector;
use Swagger\Client\Eve\ObjectSerializer;

/**
 * SkillsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SkillsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCharactersCharacterIdAttributes' => [
            'application/json',
        ],
        'getCharactersCharacterIdSkillqueue' => [
            'application/json',
        ],
        'getCharactersCharacterIdSkills' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCharactersCharacterIdAttributes
     *
     * Get character attributes
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdAttributes'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdAttributes($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdAttributes'][0])
    {
        list($response) = $this->getCharactersCharacterIdAttributesWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdAttributesWithHttpInfo
     *
     * Get character attributes
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdAttributes'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdAttributesWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdAttributes'][0])
    {
        $request = $this->getCharactersCharacterIdAttributesRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdAttributesAsync
     *
     * Get character attributes
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdAttributes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAttributesAsync($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdAttributes'][0])
    {
        return $this->getCharactersCharacterIdAttributesAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdAttributesAsyncWithHttpInfo
     *
     * Get character attributes
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdAttributes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAttributesAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdAttributes'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCharactersCharacterIdAttributesOk';
        $request = $this->getCharactersCharacterIdAttributesRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdAttributes'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdAttributes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdAttributesRequest($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdAttributes'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdAttributes'
            );
        }
        if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling SkillsApi.getCharactersCharacterIdAttributes, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/characters/{character_id}/attributes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdSkillqueue
     *
     * Get character&#39;s skill queue
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkillqueue'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdSkillqueue($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkillqueue'][0])
    {
        list($response) = $this->getCharactersCharacterIdSkillqueueWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdSkillqueueWithHttpInfo
     *
     * Get character&#39;s skill queue
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkillqueue'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdSkillqueueWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkillqueue'][0])
    {
        $request = $this->getCharactersCharacterIdSkillqueueRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdSkillqueueAsync
     *
     * Get character&#39;s skill queue
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkillqueue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdSkillqueueAsync($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkillqueue'][0])
    {
        return $this->getCharactersCharacterIdSkillqueueAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdSkillqueueAsyncWithHttpInfo
     *
     * Get character&#39;s skill queue
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkillqueue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdSkillqueueAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkillqueue'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillqueue200Ok[]';
        $request = $this->getCharactersCharacterIdSkillqueueRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdSkillqueue'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkillqueue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdSkillqueueRequest($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkillqueue'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdSkillqueue'
            );
        }
        if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling SkillsApi.getCharactersCharacterIdSkillqueue, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/characters/{character_id}/skillqueue/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdSkills
     *
     * Get character skills
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkills'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdSkills($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkills'][0])
    {
        list($response) = $this->getCharactersCharacterIdSkillsWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdSkillsWithHttpInfo
     *
     * Get character skills
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkills'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdSkillsWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkills'][0])
    {
        $request = $this->getCharactersCharacterIdSkillsRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdSkillsAsync
     *
     * Get character skills
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdSkillsAsync($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkills'][0])
    {
        return $this->getCharactersCharacterIdSkillsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdSkillsAsyncWithHttpInfo
     *
     * Get character skills
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdSkillsAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkills'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCharactersCharacterIdSkillsOk';
        $request = $this->getCharactersCharacterIdSkillsRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdSkills'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdSkills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdSkillsRequest($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCharactersCharacterIdSkills'][0])
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdSkills'
            );
        }
        if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling SkillsApi.getCharactersCharacterIdSkills, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/characters/{character_id}/skills/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
