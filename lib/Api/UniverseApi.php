<?php
/**
 * UniverseApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Swagger\Client\Eve\ApiException;
use Swagger\Client\Eve\Configuration;
use Swagger\Client\Eve\FormDataProcessor;
use Swagger\Client\Eve\HeaderSelector;
use Swagger\Client\Eve\ObjectSerializer;

/**
 * UniverseApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UniverseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getUniverseAncestries' => [
            'application/json',
        ],
        'getUniverseAsteroidBeltsAsteroidBeltId' => [
            'application/json',
        ],
        'getUniverseBloodlines' => [
            'application/json',
        ],
        'getUniverseCategories' => [
            'application/json',
        ],
        'getUniverseCategoriesCategoryId' => [
            'application/json',
        ],
        'getUniverseConstellations' => [
            'application/json',
        ],
        'getUniverseConstellationsConstellationId' => [
            'application/json',
        ],
        'getUniverseFactions' => [
            'application/json',
        ],
        'getUniverseGraphics' => [
            'application/json',
        ],
        'getUniverseGraphicsGraphicId' => [
            'application/json',
        ],
        'getUniverseGroups' => [
            'application/json',
        ],
        'getUniverseGroupsGroupId' => [
            'application/json',
        ],
        'getUniverseMoonsMoonId' => [
            'application/json',
        ],
        'getUniversePlanetsPlanetId' => [
            'application/json',
        ],
        'getUniverseRaces' => [
            'application/json',
        ],
        'getUniverseRegions' => [
            'application/json',
        ],
        'getUniverseRegionsRegionId' => [
            'application/json',
        ],
        'getUniverseStargatesStargateId' => [
            'application/json',
        ],
        'getUniverseStarsStarId' => [
            'application/json',
        ],
        'getUniverseStationsStationId' => [
            'application/json',
        ],
        'getUniverseStructures' => [
            'application/json',
        ],
        'getUniverseStructuresStructureId' => [
            'application/json',
        ],
        'getUniverseSystemJumps' => [
            'application/json',
        ],
        'getUniverseSystemKills' => [
            'application/json',
        ],
        'getUniverseSystems' => [
            'application/json',
        ],
        'getUniverseSystemsSystemId' => [
            'application/json',
        ],
        'getUniverseTypes' => [
            'application/json',
        ],
        'getUniverseTypesTypeId' => [
            'application/json',
        ],
        'postUniverseIds' => [
            'application/json',
        ],
        'postUniverseNames' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUniverseAncestries
     *
     * Get ancestries
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAncestries'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseAncestries($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseAncestries'][0])
    {
        list($response) = $this->getUniverseAncestriesWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseAncestriesWithHttpInfo
     *
     * Get ancestries
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAncestries'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseAncestriesWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseAncestries'][0])
    {
        $request = $this->getUniverseAncestriesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseAncestriesAsync
     *
     * Get ancestries
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAncestries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseAncestriesAsync($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseAncestries'][0])
    {
        return $this->getUniverseAncestriesAsyncWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseAncestriesAsyncWithHttpInfo
     *
     * Get ancestries
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAncestries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseAncestriesAsyncWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseAncestries'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseAncestries200Ok[]';
        $request = $this->getUniverseAncestriesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseAncestries'
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAncestries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseAncestriesRequest($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseAncestries'][0])
    {






        $resourcePath = '/v1/universe/ancestries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseAsteroidBeltsAsteroidBeltId
     *
     * Get asteroid belt information
     *
     * @param  int $asteroid_belt_id asteroid_belt_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseAsteroidBeltsAsteroidBeltId($asteroid_belt_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'][0])
    {
        list($response) = $this->getUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo($asteroid_belt_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo
     *
     * Get asteroid belt information
     *
     * @param  int $asteroid_belt_id asteroid_belt_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseAsteroidBeltsAsteroidBeltIdWithHttpInfo($asteroid_belt_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'][0])
    {
        $request = $this->getUniverseAsteroidBeltsAsteroidBeltIdRequest($asteroid_belt_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseAsteroidBeltsAsteroidBeltIdAsync
     *
     * Get asteroid belt information
     *
     * @param  int $asteroid_belt_id asteroid_belt_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseAsteroidBeltsAsteroidBeltIdAsync($asteroid_belt_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'][0])
    {
        return $this->getUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo($asteroid_belt_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo
     *
     * Get asteroid belt information
     *
     * @param  int $asteroid_belt_id asteroid_belt_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseAsteroidBeltsAsteroidBeltIdAsyncWithHttpInfo($asteroid_belt_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseAsteroidBeltsAsteroidBeltIdOk';
        $request = $this->getUniverseAsteroidBeltsAsteroidBeltIdRequest($asteroid_belt_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseAsteroidBeltsAsteroidBeltId'
     *
     * @param  int $asteroid_belt_id asteroid_belt_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseAsteroidBeltsAsteroidBeltIdRequest($asteroid_belt_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseAsteroidBeltsAsteroidBeltId'][0])
    {

        // verify the required parameter 'asteroid_belt_id' is set
        if ($asteroid_belt_id === null || (is_array($asteroid_belt_id) && count($asteroid_belt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asteroid_belt_id when calling getUniverseAsteroidBeltsAsteroidBeltId'
            );
        }




        $resourcePath = '/v1/universe/asteroid_belts/{asteroid_belt_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($asteroid_belt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asteroid_belt_id' . '}',
                ObjectSerializer::toPathValue($asteroid_belt_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseBloodlines
     *
     * Get bloodlines
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseBloodlines'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseBloodlines($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseBloodlines'][0])
    {
        list($response) = $this->getUniverseBloodlinesWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseBloodlinesWithHttpInfo
     *
     * Get bloodlines
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseBloodlines'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseBloodlinesWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseBloodlines'][0])
    {
        $request = $this->getUniverseBloodlinesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseBloodlinesAsync
     *
     * Get bloodlines
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseBloodlines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseBloodlinesAsync($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseBloodlines'][0])
    {
        return $this->getUniverseBloodlinesAsyncWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseBloodlinesAsyncWithHttpInfo
     *
     * Get bloodlines
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseBloodlines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseBloodlinesAsyncWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseBloodlines'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseBloodlines200Ok[]';
        $request = $this->getUniverseBloodlinesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseBloodlines'
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseBloodlines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseBloodlinesRequest($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseBloodlines'][0])
    {






        $resourcePath = '/v1/universe/bloodlines/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseCategories
     *
     * Get item categories
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategories'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseCategories($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseCategories'][0])
    {
        list($response) = $this->getUniverseCategoriesWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseCategoriesWithHttpInfo
     *
     * Get item categories
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategories'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseCategoriesWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseCategories'][0])
    {
        $request = $this->getUniverseCategoriesRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseCategoriesAsync
     *
     * Get item categories
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseCategoriesAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseCategories'][0])
    {
        return $this->getUniverseCategoriesAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseCategoriesAsyncWithHttpInfo
     *
     * Get item categories
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseCategoriesAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseCategories'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseCategoriesRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseCategories'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseCategoriesRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseCategories'][0])
    {




        $resourcePath = '/v1/universe/categories/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseCategoriesCategoryId
     *
     * Get item category information
     *
     * @param  int $category_id An Eve item category ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategoriesCategoryId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseCategoriesCategoryId($category_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseCategoriesCategoryId'][0])
    {
        list($response) = $this->getUniverseCategoriesCategoryIdWithHttpInfo($category_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseCategoriesCategoryIdWithHttpInfo
     *
     * Get item category information
     *
     * @param  int $category_id An Eve item category ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategoriesCategoryId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseCategoriesCategoryIdWithHttpInfo($category_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseCategoriesCategoryId'][0])
    {
        $request = $this->getUniverseCategoriesCategoryIdRequest($category_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseCategoriesCategoryIdAsync
     *
     * Get item category information
     *
     * @param  int $category_id An Eve item category ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategoriesCategoryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseCategoriesCategoryIdAsync($category_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseCategoriesCategoryId'][0])
    {
        return $this->getUniverseCategoriesCategoryIdAsyncWithHttpInfo($category_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseCategoriesCategoryIdAsyncWithHttpInfo
     *
     * Get item category information
     *
     * @param  int $category_id An Eve item category ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategoriesCategoryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseCategoriesCategoryIdAsyncWithHttpInfo($category_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseCategoriesCategoryId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseCategoriesCategoryIdOk';
        $request = $this->getUniverseCategoriesCategoryIdRequest($category_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseCategoriesCategoryId'
     *
     * @param  int $category_id An Eve item category ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseCategoriesCategoryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseCategoriesCategoryIdRequest($category_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseCategoriesCategoryId'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling getUniverseCategoriesCategoryId'
            );
        }






        $resourcePath = '/v1/universe/categories/{category_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'category_id' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseConstellations
     *
     * Get constellations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellations'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseConstellations($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseConstellations'][0])
    {
        list($response) = $this->getUniverseConstellationsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseConstellationsWithHttpInfo
     *
     * Get constellations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellations'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseConstellationsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseConstellations'][0])
    {
        $request = $this->getUniverseConstellationsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseConstellationsAsync
     *
     * Get constellations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseConstellationsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseConstellations'][0])
    {
        return $this->getUniverseConstellationsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseConstellationsAsyncWithHttpInfo
     *
     * Get constellations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseConstellationsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseConstellations'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseConstellationsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseConstellations'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseConstellationsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseConstellations'][0])
    {




        $resourcePath = '/v1/universe/constellations/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseConstellationsConstellationId
     *
     * Get constellation information
     *
     * @param  int $constellation_id constellation_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellationsConstellationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseConstellationsConstellationId($constellation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseConstellationsConstellationId'][0])
    {
        list($response) = $this->getUniverseConstellationsConstellationIdWithHttpInfo($constellation_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseConstellationsConstellationIdWithHttpInfo
     *
     * Get constellation information
     *
     * @param  int $constellation_id constellation_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellationsConstellationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseConstellationsConstellationIdWithHttpInfo($constellation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseConstellationsConstellationId'][0])
    {
        $request = $this->getUniverseConstellationsConstellationIdRequest($constellation_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseConstellationsConstellationIdAsync
     *
     * Get constellation information
     *
     * @param  int $constellation_id constellation_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellationsConstellationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseConstellationsConstellationIdAsync($constellation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseConstellationsConstellationId'][0])
    {
        return $this->getUniverseConstellationsConstellationIdAsyncWithHttpInfo($constellation_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseConstellationsConstellationIdAsyncWithHttpInfo
     *
     * Get constellation information
     *
     * @param  int $constellation_id constellation_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellationsConstellationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseConstellationsConstellationIdAsyncWithHttpInfo($constellation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseConstellationsConstellationId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseConstellationsConstellationIdOk';
        $request = $this->getUniverseConstellationsConstellationIdRequest($constellation_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseConstellationsConstellationId'
     *
     * @param  int $constellation_id constellation_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseConstellationsConstellationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseConstellationsConstellationIdRequest($constellation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseConstellationsConstellationId'][0])
    {

        // verify the required parameter 'constellation_id' is set
        if ($constellation_id === null || (is_array($constellation_id) && count($constellation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $constellation_id when calling getUniverseConstellationsConstellationId'
            );
        }






        $resourcePath = '/v1/universe/constellations/{constellation_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($constellation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'constellation_id' . '}',
                ObjectSerializer::toPathValue($constellation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseFactions
     *
     * Get factions
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseFactions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseFactions($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseFactions'][0])
    {
        list($response) = $this->getUniverseFactionsWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseFactionsWithHttpInfo
     *
     * Get factions
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseFactions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseFactionsWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseFactions'][0])
    {
        $request = $this->getUniverseFactionsRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseFactionsAsync
     *
     * Get factions
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseFactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseFactionsAsync($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseFactions'][0])
    {
        return $this->getUniverseFactionsAsyncWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseFactionsAsyncWithHttpInfo
     *
     * Get factions
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseFactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseFactionsAsyncWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseFactions'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseFactions200Ok[]';
        $request = $this->getUniverseFactionsRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseFactions'
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseFactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseFactionsRequest($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseFactions'][0])
    {






        $resourcePath = '/v2/universe/factions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseGraphics
     *
     * Get graphics
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphics'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseGraphics($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphics'][0])
    {
        list($response) = $this->getUniverseGraphicsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseGraphicsWithHttpInfo
     *
     * Get graphics
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphics'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseGraphicsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphics'][0])
    {
        $request = $this->getUniverseGraphicsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseGraphicsAsync
     *
     * Get graphics
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGraphicsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphics'][0])
    {
        return $this->getUniverseGraphicsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseGraphicsAsyncWithHttpInfo
     *
     * Get graphics
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGraphicsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphics'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseGraphicsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseGraphics'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseGraphicsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphics'][0])
    {




        $resourcePath = '/v1/universe/graphics/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseGraphicsGraphicId
     *
     * Get graphic information
     *
     * @param  int $graphic_id graphic_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphicsGraphicId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseGraphicsGraphicId($graphic_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphicsGraphicId'][0])
    {
        list($response) = $this->getUniverseGraphicsGraphicIdWithHttpInfo($graphic_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseGraphicsGraphicIdWithHttpInfo
     *
     * Get graphic information
     *
     * @param  int $graphic_id graphic_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphicsGraphicId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseGraphicsGraphicIdWithHttpInfo($graphic_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphicsGraphicId'][0])
    {
        $request = $this->getUniverseGraphicsGraphicIdRequest($graphic_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseGraphicsGraphicIdAsync
     *
     * Get graphic information
     *
     * @param  int $graphic_id graphic_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphicsGraphicId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGraphicsGraphicIdAsync($graphic_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphicsGraphicId'][0])
    {
        return $this->getUniverseGraphicsGraphicIdAsyncWithHttpInfo($graphic_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseGraphicsGraphicIdAsyncWithHttpInfo
     *
     * Get graphic information
     *
     * @param  int $graphic_id graphic_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphicsGraphicId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGraphicsGraphicIdAsyncWithHttpInfo($graphic_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphicsGraphicId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseGraphicsGraphicIdOk';
        $request = $this->getUniverseGraphicsGraphicIdRequest($graphic_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseGraphicsGraphicId'
     *
     * @param  int $graphic_id graphic_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGraphicsGraphicId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseGraphicsGraphicIdRequest($graphic_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseGraphicsGraphicId'][0])
    {

        // verify the required parameter 'graphic_id' is set
        if ($graphic_id === null || (is_array($graphic_id) && count($graphic_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $graphic_id when calling getUniverseGraphicsGraphicId'
            );
        }




        $resourcePath = '/v1/universe/graphics/{graphic_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($graphic_id !== null) {
            $resourcePath = str_replace(
                '{' . 'graphic_id' . '}',
                ObjectSerializer::toPathValue($graphic_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseGroups
     *
     * Get item groups
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroups'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseGroups($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseGroups'][0])
    {
        list($response) = $this->getUniverseGroupsWithHttpInfo($datasource, $if_none_match, $page, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseGroupsWithHttpInfo
     *
     * Get item groups
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroups'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseGroupsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseGroups'][0])
    {
        $request = $this->getUniverseGroupsRequest($datasource, $if_none_match, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseGroupsAsync
     *
     * Get item groups
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGroupsAsync($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseGroups'][0])
    {
        return $this->getUniverseGroupsAsyncWithHttpInfo($datasource, $if_none_match, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseGroupsAsyncWithHttpInfo
     *
     * Get item groups
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGroupsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseGroups'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseGroupsRequest($datasource, $if_none_match, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseGroups'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseGroupsRequest($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseGroups'][0])
    {



        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UniverseApi.getUniverseGroups, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/universe/groups/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseGroupsGroupId
     *
     * Get item group information
     *
     * @param  int $group_id An Eve item group ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroupsGroupId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseGroupsGroupId($group_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseGroupsGroupId'][0])
    {
        list($response) = $this->getUniverseGroupsGroupIdWithHttpInfo($group_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseGroupsGroupIdWithHttpInfo
     *
     * Get item group information
     *
     * @param  int $group_id An Eve item group ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroupsGroupId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseGroupsGroupIdWithHttpInfo($group_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseGroupsGroupId'][0])
    {
        $request = $this->getUniverseGroupsGroupIdRequest($group_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseGroupsGroupIdAsync
     *
     * Get item group information
     *
     * @param  int $group_id An Eve item group ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroupsGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGroupsGroupIdAsync($group_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseGroupsGroupId'][0])
    {
        return $this->getUniverseGroupsGroupIdAsyncWithHttpInfo($group_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseGroupsGroupIdAsyncWithHttpInfo
     *
     * Get item group information
     *
     * @param  int $group_id An Eve item group ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroupsGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseGroupsGroupIdAsyncWithHttpInfo($group_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseGroupsGroupId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseGroupsGroupIdOk';
        $request = $this->getUniverseGroupsGroupIdRequest($group_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseGroupsGroupId'
     *
     * @param  int $group_id An Eve item group ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseGroupsGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseGroupsGroupIdRequest($group_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseGroupsGroupId'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getUniverseGroupsGroupId'
            );
        }






        $resourcePath = '/v1/universe/groups/{group_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseMoonsMoonId
     *
     * Get moon information
     *
     * @param  int $moon_id moon_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseMoonsMoonId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseMoonsMoonId($moon_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseMoonsMoonId'][0])
    {
        list($response) = $this->getUniverseMoonsMoonIdWithHttpInfo($moon_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseMoonsMoonIdWithHttpInfo
     *
     * Get moon information
     *
     * @param  int $moon_id moon_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseMoonsMoonId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseMoonsMoonIdWithHttpInfo($moon_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseMoonsMoonId'][0])
    {
        $request = $this->getUniverseMoonsMoonIdRequest($moon_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseMoonsMoonIdAsync
     *
     * Get moon information
     *
     * @param  int $moon_id moon_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseMoonsMoonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseMoonsMoonIdAsync($moon_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseMoonsMoonId'][0])
    {
        return $this->getUniverseMoonsMoonIdAsyncWithHttpInfo($moon_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseMoonsMoonIdAsyncWithHttpInfo
     *
     * Get moon information
     *
     * @param  int $moon_id moon_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseMoonsMoonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseMoonsMoonIdAsyncWithHttpInfo($moon_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseMoonsMoonId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseMoonsMoonIdOk';
        $request = $this->getUniverseMoonsMoonIdRequest($moon_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseMoonsMoonId'
     *
     * @param  int $moon_id moon_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseMoonsMoonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseMoonsMoonIdRequest($moon_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseMoonsMoonId'][0])
    {

        // verify the required parameter 'moon_id' is set
        if ($moon_id === null || (is_array($moon_id) && count($moon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $moon_id when calling getUniverseMoonsMoonId'
            );
        }




        $resourcePath = '/v1/universe/moons/{moon_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($moon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'moon_id' . '}',
                ObjectSerializer::toPathValue($moon_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniversePlanetsPlanetId
     *
     * Get planet information
     *
     * @param  int $planet_id planet_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniversePlanetsPlanetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniversePlanetsPlanetId($planet_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniversePlanetsPlanetId'][0])
    {
        list($response) = $this->getUniversePlanetsPlanetIdWithHttpInfo($planet_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniversePlanetsPlanetIdWithHttpInfo
     *
     * Get planet information
     *
     * @param  int $planet_id planet_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniversePlanetsPlanetId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniversePlanetsPlanetIdWithHttpInfo($planet_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniversePlanetsPlanetId'][0])
    {
        $request = $this->getUniversePlanetsPlanetIdRequest($planet_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniversePlanetsPlanetIdAsync
     *
     * Get planet information
     *
     * @param  int $planet_id planet_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniversePlanetsPlanetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniversePlanetsPlanetIdAsync($planet_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniversePlanetsPlanetId'][0])
    {
        return $this->getUniversePlanetsPlanetIdAsyncWithHttpInfo($planet_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniversePlanetsPlanetIdAsyncWithHttpInfo
     *
     * Get planet information
     *
     * @param  int $planet_id planet_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniversePlanetsPlanetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniversePlanetsPlanetIdAsyncWithHttpInfo($planet_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniversePlanetsPlanetId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniversePlanetsPlanetIdOk';
        $request = $this->getUniversePlanetsPlanetIdRequest($planet_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniversePlanetsPlanetId'
     *
     * @param  int $planet_id planet_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniversePlanetsPlanetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniversePlanetsPlanetIdRequest($planet_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniversePlanetsPlanetId'][0])
    {

        // verify the required parameter 'planet_id' is set
        if ($planet_id === null || (is_array($planet_id) && count($planet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planet_id when calling getUniversePlanetsPlanetId'
            );
        }




        $resourcePath = '/v1/universe/planets/{planet_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($planet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'planet_id' . '}',
                ObjectSerializer::toPathValue($planet_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseRaces
     *
     * Get character races
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRaces'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseRaces($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRaces'][0])
    {
        list($response) = $this->getUniverseRacesWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseRacesWithHttpInfo
     *
     * Get character races
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRaces'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseRacesWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRaces'][0])
    {
        $request = $this->getUniverseRacesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseRacesAsync
     *
     * Get character races
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRacesAsync($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRaces'][0])
    {
        return $this->getUniverseRacesAsyncWithHttpInfo($accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseRacesAsyncWithHttpInfo
     *
     * Get character races
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRacesAsyncWithHttpInfo($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRaces'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseRaces200Ok[]';
        $request = $this->getUniverseRacesRequest($accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseRaces'
     *
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseRacesRequest($accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRaces'][0])
    {






        $resourcePath = '/v1/universe/races/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseRegions
     *
     * Get regions
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseRegions($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseRegions'][0])
    {
        list($response) = $this->getUniverseRegionsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseRegionsWithHttpInfo
     *
     * Get regions
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseRegionsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseRegions'][0])
    {
        $request = $this->getUniverseRegionsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseRegionsAsync
     *
     * Get regions
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRegionsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseRegions'][0])
    {
        return $this->getUniverseRegionsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseRegionsAsyncWithHttpInfo
     *
     * Get regions
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRegionsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseRegions'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseRegionsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseRegions'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseRegionsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseRegions'][0])
    {




        $resourcePath = '/v1/universe/regions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseRegionsRegionId
     *
     * Get region information
     *
     * @param  int $region_id region_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegionsRegionId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseRegionsRegionId($region_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRegionsRegionId'][0])
    {
        list($response) = $this->getUniverseRegionsRegionIdWithHttpInfo($region_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseRegionsRegionIdWithHttpInfo
     *
     * Get region information
     *
     * @param  int $region_id region_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegionsRegionId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseRegionsRegionIdWithHttpInfo($region_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRegionsRegionId'][0])
    {
        $request = $this->getUniverseRegionsRegionIdRequest($region_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseRegionsRegionIdAsync
     *
     * Get region information
     *
     * @param  int $region_id region_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegionsRegionId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRegionsRegionIdAsync($region_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRegionsRegionId'][0])
    {
        return $this->getUniverseRegionsRegionIdAsyncWithHttpInfo($region_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseRegionsRegionIdAsyncWithHttpInfo
     *
     * Get region information
     *
     * @param  int $region_id region_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegionsRegionId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseRegionsRegionIdAsyncWithHttpInfo($region_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRegionsRegionId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseRegionsRegionIdOk';
        $request = $this->getUniverseRegionsRegionIdRequest($region_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseRegionsRegionId'
     *
     * @param  int $region_id region_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseRegionsRegionId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseRegionsRegionIdRequest($region_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseRegionsRegionId'][0])
    {

        // verify the required parameter 'region_id' is set
        if ($region_id === null || (is_array($region_id) && count($region_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region_id when calling getUniverseRegionsRegionId'
            );
        }






        $resourcePath = '/v1/universe/regions/{region_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($region_id !== null) {
            $resourcePath = str_replace(
                '{' . 'region_id' . '}',
                ObjectSerializer::toPathValue($region_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseStargatesStargateId
     *
     * Get stargate information
     *
     * @param  int $stargate_id stargate_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStargatesStargateId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseStargatesStargateId($stargate_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStargatesStargateId'][0])
    {
        list($response) = $this->getUniverseStargatesStargateIdWithHttpInfo($stargate_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseStargatesStargateIdWithHttpInfo
     *
     * Get stargate information
     *
     * @param  int $stargate_id stargate_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStargatesStargateId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseStargatesStargateIdWithHttpInfo($stargate_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStargatesStargateId'][0])
    {
        $request = $this->getUniverseStargatesStargateIdRequest($stargate_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseStargatesStargateIdAsync
     *
     * Get stargate information
     *
     * @param  int $stargate_id stargate_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStargatesStargateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStargatesStargateIdAsync($stargate_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStargatesStargateId'][0])
    {
        return $this->getUniverseStargatesStargateIdAsyncWithHttpInfo($stargate_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseStargatesStargateIdAsyncWithHttpInfo
     *
     * Get stargate information
     *
     * @param  int $stargate_id stargate_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStargatesStargateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStargatesStargateIdAsyncWithHttpInfo($stargate_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStargatesStargateId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseStargatesStargateIdOk';
        $request = $this->getUniverseStargatesStargateIdRequest($stargate_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseStargatesStargateId'
     *
     * @param  int $stargate_id stargate_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStargatesStargateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseStargatesStargateIdRequest($stargate_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStargatesStargateId'][0])
    {

        // verify the required parameter 'stargate_id' is set
        if ($stargate_id === null || (is_array($stargate_id) && count($stargate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stargate_id when calling getUniverseStargatesStargateId'
            );
        }




        $resourcePath = '/v1/universe/stargates/{stargate_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($stargate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stargate_id' . '}',
                ObjectSerializer::toPathValue($stargate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseStarsStarId
     *
     * Get star information
     *
     * @param  int $star_id star_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStarsStarId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseStarsStarId($star_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStarsStarId'][0])
    {
        list($response) = $this->getUniverseStarsStarIdWithHttpInfo($star_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseStarsStarIdWithHttpInfo
     *
     * Get star information
     *
     * @param  int $star_id star_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStarsStarId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseStarsStarIdWithHttpInfo($star_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStarsStarId'][0])
    {
        $request = $this->getUniverseStarsStarIdRequest($star_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseStarsStarIdAsync
     *
     * Get star information
     *
     * @param  int $star_id star_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStarsStarId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStarsStarIdAsync($star_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStarsStarId'][0])
    {
        return $this->getUniverseStarsStarIdAsyncWithHttpInfo($star_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseStarsStarIdAsyncWithHttpInfo
     *
     * Get star information
     *
     * @param  int $star_id star_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStarsStarId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStarsStarIdAsyncWithHttpInfo($star_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStarsStarId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseStarsStarIdOk';
        $request = $this->getUniverseStarsStarIdRequest($star_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseStarsStarId'
     *
     * @param  int $star_id star_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStarsStarId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseStarsStarIdRequest($star_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStarsStarId'][0])
    {

        // verify the required parameter 'star_id' is set
        if ($star_id === null || (is_array($star_id) && count($star_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $star_id when calling getUniverseStarsStarId'
            );
        }




        $resourcePath = '/v1/universe/stars/{star_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($star_id !== null) {
            $resourcePath = str_replace(
                '{' . 'star_id' . '}',
                ObjectSerializer::toPathValue($star_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseStationsStationId
     *
     * Get station information
     *
     * @param  int $station_id station_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStationsStationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseStationsStationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseStationsStationId($station_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStationsStationId'][0])
    {
        list($response) = $this->getUniverseStationsStationIdWithHttpInfo($station_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseStationsStationIdWithHttpInfo
     *
     * Get station information
     *
     * @param  int $station_id station_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStationsStationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseStationsStationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseStationsStationIdWithHttpInfo($station_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStationsStationId'][0])
    {
        $request = $this->getUniverseStationsStationIdRequest($station_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseStationsStationIdAsync
     *
     * Get station information
     *
     * @param  int $station_id station_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStationsStationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStationsStationIdAsync($station_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStationsStationId'][0])
    {
        return $this->getUniverseStationsStationIdAsyncWithHttpInfo($station_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseStationsStationIdAsyncWithHttpInfo
     *
     * Get station information
     *
     * @param  int $station_id station_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStationsStationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStationsStationIdAsyncWithHttpInfo($station_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStationsStationId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseStationsStationIdOk';
        $request = $this->getUniverseStationsStationIdRequest($station_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseStationsStationId'
     *
     * @param  int $station_id station_id integer (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStationsStationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseStationsStationIdRequest($station_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseStationsStationId'][0])
    {

        // verify the required parameter 'station_id' is set
        if ($station_id === null || (is_array($station_id) && count($station_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id when calling getUniverseStationsStationId'
            );
        }




        $resourcePath = '/v2/universe/stations/{station_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($station_id !== null) {
            $resourcePath = str_replace(
                '{' . 'station_id' . '}',
                ObjectSerializer::toPathValue($station_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseStructures
     *
     * List all public structures
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $filter Only list public structures that have this service online (optional)
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructures'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseStructures($datasource = 'tranquility', $filter = null, $if_none_match = null, string $contentType = self::contentTypes['getUniverseStructures'][0])
    {
        list($response) = $this->getUniverseStructuresWithHttpInfo($datasource, $filter, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseStructuresWithHttpInfo
     *
     * List all public structures
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $filter Only list public structures that have this service online (optional)
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructures'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseStructuresWithHttpInfo($datasource = 'tranquility', $filter = null, $if_none_match = null, string $contentType = self::contentTypes['getUniverseStructures'][0])
    {
        $request = $this->getUniverseStructuresRequest($datasource, $filter, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseStructuresAsync
     *
     * List all public structures
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $filter Only list public structures that have this service online (optional)
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStructuresAsync($datasource = 'tranquility', $filter = null, $if_none_match = null, string $contentType = self::contentTypes['getUniverseStructures'][0])
    {
        return $this->getUniverseStructuresAsyncWithHttpInfo($datasource, $filter, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseStructuresAsyncWithHttpInfo
     *
     * List all public structures
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $filter Only list public structures that have this service online (optional)
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStructuresAsyncWithHttpInfo($datasource = 'tranquility', $filter = null, $if_none_match = null, string $contentType = self::contentTypes['getUniverseStructures'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseStructuresRequest($datasource, $filter, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseStructures'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $filter Only list public structures that have this service online (optional)
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseStructuresRequest($datasource = 'tranquility', $filter = null, $if_none_match = null, string $contentType = self::contentTypes['getUniverseStructures'][0])
    {





        $resourcePath = '/v1/universe/structures/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseStructuresStructureId
     *
     * Get structure information
     *
     * @param  int $structure_id An Eve structure ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructuresStructureId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseStructuresStructureId($structure_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getUniverseStructuresStructureId'][0])
    {
        list($response) = $this->getUniverseStructuresStructureIdWithHttpInfo($structure_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseStructuresStructureIdWithHttpInfo
     *
     * Get structure information
     *
     * @param  int $structure_id An Eve structure ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructuresStructureId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseStructuresStructureIdWithHttpInfo($structure_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getUniverseStructuresStructureId'][0])
    {
        $request = $this->getUniverseStructuresStructureIdRequest($structure_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseStructuresStructureIdAsync
     *
     * Get structure information
     *
     * @param  int $structure_id An Eve structure ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructuresStructureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStructuresStructureIdAsync($structure_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getUniverseStructuresStructureId'][0])
    {
        return $this->getUniverseStructuresStructureIdAsyncWithHttpInfo($structure_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseStructuresStructureIdAsyncWithHttpInfo
     *
     * Get structure information
     *
     * @param  int $structure_id An Eve structure ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructuresStructureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseStructuresStructureIdAsyncWithHttpInfo($structure_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getUniverseStructuresStructureId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseStructuresStructureIdOk';
        $request = $this->getUniverseStructuresStructureIdRequest($structure_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseStructuresStructureId'
     *
     * @param  int $structure_id An Eve structure ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseStructuresStructureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseStructuresStructureIdRequest($structure_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getUniverseStructuresStructureId'][0])
    {

        // verify the required parameter 'structure_id' is set
        if ($structure_id === null || (is_array($structure_id) && count($structure_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $structure_id when calling getUniverseStructuresStructureId'
            );
        }





        $resourcePath = '/v1/universe/structures/{structure_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($structure_id !== null) {
            $resourcePath = str_replace(
                '{' . 'structure_id' . '}',
                ObjectSerializer::toPathValue($structure_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseSystemJumps
     *
     * Get system jumps
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemJumps'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseSystemJumps($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemJumps'][0])
    {
        list($response) = $this->getUniverseSystemJumpsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseSystemJumpsWithHttpInfo
     *
     * Get system jumps
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemJumps'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseSystemJumpsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemJumps'][0])
    {
        $request = $this->getUniverseSystemJumpsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseSystemJumpsAsync
     *
     * Get system jumps
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemJumpsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemJumps'][0])
    {
        return $this->getUniverseSystemJumpsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseSystemJumpsAsyncWithHttpInfo
     *
     * Get system jumps
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemJumpsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemJumps'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseSystemJumps200Ok[]';
        $request = $this->getUniverseSystemJumpsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseSystemJumps'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseSystemJumpsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemJumps'][0])
    {




        $resourcePath = '/v1/universe/system_jumps/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseSystemKills
     *
     * Get system kills
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemKills'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseSystemKills($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemKills'][0])
    {
        list($response) = $this->getUniverseSystemKillsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseSystemKillsWithHttpInfo
     *
     * Get system kills
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemKills'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseSystemKillsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemKills'][0])
    {
        $request = $this->getUniverseSystemKillsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseSystemKillsAsync
     *
     * Get system kills
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemKills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemKillsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemKills'][0])
    {
        return $this->getUniverseSystemKillsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseSystemKillsAsyncWithHttpInfo
     *
     * Get system kills
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemKills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemKillsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemKills'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseSystemKills200Ok[]';
        $request = $this->getUniverseSystemKillsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseSystemKills'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemKills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseSystemKillsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystemKills'][0])
    {




        $resourcePath = '/v2/universe/system_kills/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseSystems
     *
     * Get solar systems
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystems'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseSystems($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystems'][0])
    {
        list($response) = $this->getUniverseSystemsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseSystemsWithHttpInfo
     *
     * Get solar systems
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystems'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseSystemsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystems'][0])
    {
        $request = $this->getUniverseSystemsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseSystemsAsync
     *
     * Get solar systems
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystems'][0])
    {
        return $this->getUniverseSystemsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseSystemsAsyncWithHttpInfo
     *
     * Get solar systems
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystems'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseSystemsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseSystems'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseSystemsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getUniverseSystems'][0])
    {




        $resourcePath = '/v1/universe/systems/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseSystemsSystemId
     *
     * Get solar system information
     *
     * @param  int $system_id system_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemsSystemId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseSystemsSystemId($system_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseSystemsSystemId'][0])
    {
        list($response) = $this->getUniverseSystemsSystemIdWithHttpInfo($system_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseSystemsSystemIdWithHttpInfo
     *
     * Get solar system information
     *
     * @param  int $system_id system_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemsSystemId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseSystemsSystemIdWithHttpInfo($system_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseSystemsSystemId'][0])
    {
        $request = $this->getUniverseSystemsSystemIdRequest($system_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseSystemsSystemIdAsync
     *
     * Get solar system information
     *
     * @param  int $system_id system_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemsSystemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemsSystemIdAsync($system_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseSystemsSystemId'][0])
    {
        return $this->getUniverseSystemsSystemIdAsyncWithHttpInfo($system_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseSystemsSystemIdAsyncWithHttpInfo
     *
     * Get solar system information
     *
     * @param  int $system_id system_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemsSystemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseSystemsSystemIdAsyncWithHttpInfo($system_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseSystemsSystemId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseSystemsSystemIdOk';
        $request = $this->getUniverseSystemsSystemIdRequest($system_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseSystemsSystemId'
     *
     * @param  int $system_id system_id integer (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseSystemsSystemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseSystemsSystemIdRequest($system_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseSystemsSystemId'][0])
    {

        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling getUniverseSystemsSystemId'
            );
        }






        $resourcePath = '/v4/universe/systems/{system_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'system_id' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseTypes
     *
     * Get types
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypes'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseTypes($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseTypes'][0])
    {
        list($response) = $this->getUniverseTypesWithHttpInfo($datasource, $if_none_match, $page, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseTypesWithHttpInfo
     *
     * Get types
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypes'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseTypesWithHttpInfo($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseTypes'][0])
    {
        $request = $this->getUniverseTypesRequest($datasource, $if_none_match, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseTypesAsync
     *
     * Get types
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseTypesAsync($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseTypes'][0])
    {
        return $this->getUniverseTypesAsyncWithHttpInfo($datasource, $if_none_match, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseTypesAsyncWithHttpInfo
     *
     * Get types
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseTypesAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseTypes'][0])
    {
        $returnType = 'int[]';
        $request = $this->getUniverseTypesRequest($datasource, $if_none_match, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseTypes'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseTypesRequest($datasource = 'tranquility', $if_none_match = null, $page = 1, string $contentType = self::contentTypes['getUniverseTypes'][0])
    {



        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UniverseApi.getUniverseTypes, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/universe/types/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniverseTypesTypeId
     *
     * Get type information
     *
     * @param  int $type_id An Eve item type ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypesTypeId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getUniverseTypesTypeId($type_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseTypesTypeId'][0])
    {
        list($response) = $this->getUniverseTypesTypeIdWithHttpInfo($type_id, $accept_language, $datasource, $if_none_match, $language, $contentType);
        return $response;
    }

    /**
     * Operation getUniverseTypesTypeIdWithHttpInfo
     *
     * Get type information
     *
     * @param  int $type_id An Eve item type ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypesTypeId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniverseTypesTypeIdWithHttpInfo($type_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseTypesTypeId'][0])
    {
        $request = $this->getUniverseTypesTypeIdRequest($type_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniverseTypesTypeIdAsync
     *
     * Get type information
     *
     * @param  int $type_id An Eve item type ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypesTypeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseTypesTypeIdAsync($type_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseTypesTypeId'][0])
    {
        return $this->getUniverseTypesTypeIdAsyncWithHttpInfo($type_id, $accept_language, $datasource, $if_none_match, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniverseTypesTypeIdAsyncWithHttpInfo
     *
     * Get type information
     *
     * @param  int $type_id An Eve item type ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypesTypeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniverseTypesTypeIdAsyncWithHttpInfo($type_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseTypesTypeId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetUniverseTypesTypeIdOk';
        $request = $this->getUniverseTypesTypeIdRequest($type_id, $accept_language, $datasource, $if_none_match, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniverseTypesTypeId'
     *
     * @param  int $type_id An Eve item type ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniverseTypesTypeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniverseTypesTypeIdRequest($type_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', string $contentType = self::contentTypes['getUniverseTypesTypeId'][0])
    {

        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_id when calling getUniverseTypesTypeId'
            );
        }






        $resourcePath = '/v2/universe/types/{type_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'type_id' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUniverseIds
     *
     * Bulk names to IDs
     *
     * @param  string[] $names The names to resolve (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseIds'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\PostUniverseIdsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function postUniverseIds($names, $accept_language = 'en', $datasource = 'tranquility', $language = 'en', string $contentType = self::contentTypes['postUniverseIds'][0])
    {
        list($response) = $this->postUniverseIdsWithHttpInfo($names, $accept_language, $datasource, $language, $contentType);
        return $response;
    }

    /**
     * Operation postUniverseIdsWithHttpInfo
     *
     * Bulk names to IDs
     *
     * @param  string[] $names The names to resolve (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseIds'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\PostUniverseIdsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUniverseIdsWithHttpInfo($names, $accept_language = 'en', $datasource = 'tranquility', $language = 'en', string $contentType = self::contentTypes['postUniverseIds'][0])
    {
        $request = $this->postUniverseIdsRequest($names, $accept_language, $datasource, $language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\PostUniverseIdsOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\PostUniverseIdsOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostUniverseIdsOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postUniverseIdsAsync
     *
     * Bulk names to IDs
     *
     * @param  string[] $names The names to resolve (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUniverseIdsAsync($names, $accept_language = 'en', $datasource = 'tranquility', $language = 'en', string $contentType = self::contentTypes['postUniverseIds'][0])
    {
        return $this->postUniverseIdsAsyncWithHttpInfo($names, $accept_language, $datasource, $language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUniverseIdsAsyncWithHttpInfo
     *
     * Bulk names to IDs
     *
     * @param  string[] $names The names to resolve (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUniverseIdsAsyncWithHttpInfo($names, $accept_language = 'en', $datasource = 'tranquility', $language = 'en', string $contentType = self::contentTypes['postUniverseIds'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\PostUniverseIdsOk';
        $request = $this->postUniverseIdsRequest($names, $accept_language, $datasource, $language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUniverseIds'
     *
     * @param  string[] $names The names to resolve (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postUniverseIdsRequest($names, $accept_language = 'en', $datasource = 'tranquility', $language = 'en', string $contentType = self::contentTypes['postUniverseIds'][0])
    {

        // verify the required parameter 'names' is set
        if ($names === null || (is_array($names) && count($names) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $names when calling postUniverseIds'
            );
        }
        if (count($names) > 500) {
            throw new \InvalidArgumentException('invalid value for "$names" when calling UniverseApi.postUniverseIds, number of items must be less than or equal to 500.');
        }
        if (count($names) < 1) {
            throw new \InvalidArgumentException('invalid value for "$names" when calling UniverseApi.postUniverseIds, number of items must be greater than or equal to 1.');
        }
        




        $resourcePath = '/v1/universe/ids/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($names)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($names));
            } else {
                $httpBody = $names;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUniverseNames
     *
     * Get names and categories for a set of IDs
     *
     * @param  int[] $ids The ids to resolve (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseNames'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\PostUniverseNames200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\PostUniverseNamesNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function postUniverseNames($ids, $datasource = 'tranquility', string $contentType = self::contentTypes['postUniverseNames'][0])
    {
        list($response) = $this->postUniverseNamesWithHttpInfo($ids, $datasource, $contentType);
        return $response;
    }

    /**
     * Operation postUniverseNamesWithHttpInfo
     *
     * Get names and categories for a set of IDs
     *
     * @param  int[] $ids The ids to resolve (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseNames'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\PostUniverseNames200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\PostUniverseNamesNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUniverseNamesWithHttpInfo($ids, $datasource = 'tranquility', string $contentType = self::contentTypes['postUniverseNames'][0])
    {
        $request = $this->postUniverseNamesRequest($ids, $datasource, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\PostUniverseNames200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\PostUniverseNamesNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\PostUniverseNames200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostUniverseNames200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\PostUniverseNamesNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postUniverseNamesAsync
     *
     * Get names and categories for a set of IDs
     *
     * @param  int[] $ids The ids to resolve (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUniverseNamesAsync($ids, $datasource = 'tranquility', string $contentType = self::contentTypes['postUniverseNames'][0])
    {
        return $this->postUniverseNamesAsyncWithHttpInfo($ids, $datasource, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUniverseNamesAsyncWithHttpInfo
     *
     * Get names and categories for a set of IDs
     *
     * @param  int[] $ids The ids to resolve (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUniverseNamesAsyncWithHttpInfo($ids, $datasource = 'tranquility', string $contentType = self::contentTypes['postUniverseNames'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\PostUniverseNames200Ok[]';
        $request = $this->postUniverseNamesRequest($ids, $datasource, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUniverseNames'
     *
     * @param  int[] $ids The ids to resolve (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUniverseNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postUniverseNamesRequest($ids, $datasource = 'tranquility', string $contentType = self::contentTypes['postUniverseNames'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling postUniverseNames'
            );
        }
        if (count($ids) > 1000) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling UniverseApi.postUniverseNames, number of items must be less than or equal to 1000.');
        }
        if (count($ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling UniverseApi.postUniverseNames, number of items must be greater than or equal to 1.');
        }
        


        $resourcePath = '/v2/universe/names/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ids)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ids));
            } else {
                $httpBody = $ids;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
