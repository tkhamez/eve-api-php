<?php
/**
 * CorporationApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Swagger\Client\Eve\ApiException;
use Swagger\Client\Eve\Configuration;
use Swagger\Client\Eve\FormDataProcessor;
use Swagger\Client\Eve\HeaderSelector;
use Swagger\Client\Eve\ObjectSerializer;

/**
 * CorporationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CorporationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCorporationsCorporationId' => [
            'application/json',
        ],
        'getCorporationsCorporationIdAlliancehistory' => [
            'application/json',
        ],
        'getCorporationsCorporationIdBlueprints' => [
            'application/json',
        ],
        'getCorporationsCorporationIdContainersLogs' => [
            'application/json',
        ],
        'getCorporationsCorporationIdDivisions' => [
            'application/json',
        ],
        'getCorporationsCorporationIdFacilities' => [
            'application/json',
        ],
        'getCorporationsCorporationIdIcons' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMedals' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMedalsIssued' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMembers' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMembersLimit' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMembersTitles' => [
            'application/json',
        ],
        'getCorporationsCorporationIdMembertracking' => [
            'application/json',
        ],
        'getCorporationsCorporationIdRoles' => [
            'application/json',
        ],
        'getCorporationsCorporationIdRolesHistory' => [
            'application/json',
        ],
        'getCorporationsCorporationIdShareholders' => [
            'application/json',
        ],
        'getCorporationsCorporationIdStandings' => [
            'application/json',
        ],
        'getCorporationsCorporationIdStarbases' => [
            'application/json',
        ],
        'getCorporationsCorporationIdStarbasesStarbaseId' => [
            'application/json',
        ],
        'getCorporationsCorporationIdStructures' => [
            'application/json',
        ],
        'getCorporationsCorporationIdTitles' => [
            'application/json',
        ],
        'getCorporationsNpccorps' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCorporationsCorporationId
     *
     * Get corporation information
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetCorporationsCorporationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationId($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationId'][0])
    {
        list($response) = $this->getCorporationsCorporationIdWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdWithHttpInfo
     *
     * Get corporation information
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetCorporationsCorporationIdNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationId'][0])
    {
        $request = $this->getCorporationsCorporationIdRequest($corporation_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdAsync
     *
     * Get corporation information
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationId'][0])
    {
        return $this->getCorporationsCorporationIdAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdAsyncWithHttpInfo
     *
     * Get corporation information
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdOk';
        $request = $this->getCorporationsCorporationIdRequest($corporation_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationId'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationId'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationId'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationId, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v5/corporations/{corporation_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistory
     *
     * Get alliance history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdAlliancehistory'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdAlliancehistory($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdAlliancehistory'][0])
    {
        list($response) = $this->getCorporationsCorporationIdAlliancehistoryWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistoryWithHttpInfo
     *
     * Get alliance history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdAlliancehistory'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdAlliancehistoryWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdAlliancehistory'][0])
    {
        $request = $this->getCorporationsCorporationIdAlliancehistoryRequest($corporation_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistoryAsync
     *
     * Get alliance history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdAlliancehistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdAlliancehistoryAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdAlliancehistory'][0])
    {
        return $this->getCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo
     *
     * Get alliance history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdAlliancehistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdAlliancehistory'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdAlliancehistory200Ok[]';
        $request = $this->getCorporationsCorporationIdAlliancehistoryRequest($corporation_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdAlliancehistory'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdAlliancehistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdAlliancehistoryRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdAlliancehistory'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdAlliancehistory'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdAlliancehistory, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v3/corporations/{corporation_id}/alliancehistory/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdBlueprints
     *
     * Get corporation blueprints
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdBlueprints'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdBlueprints($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdBlueprints'][0])
    {
        list($response) = $this->getCorporationsCorporationIdBlueprintsWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdBlueprintsWithHttpInfo
     *
     * Get corporation blueprints
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdBlueprints'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdBlueprintsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdBlueprints'][0])
    {
        $request = $this->getCorporationsCorporationIdBlueprintsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdBlueprintsAsync
     *
     * Get corporation blueprints
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdBlueprints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdBlueprintsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdBlueprints'][0])
    {
        return $this->getCorporationsCorporationIdBlueprintsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdBlueprintsAsyncWithHttpInfo
     *
     * Get corporation blueprints
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdBlueprints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdBlueprintsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdBlueprints'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdBlueprints200Ok[]';
        $request = $this->getCorporationsCorporationIdBlueprintsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdBlueprints'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdBlueprints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdBlueprintsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdBlueprints'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdBlueprints'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdBlueprints, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdBlueprints, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v3/corporations/{corporation_id}/blueprints/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdContainersLogs
     *
     * Get all corporation ALSC logs
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContainersLogs'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdContainersLogs($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdContainersLogs'][0])
    {
        list($response) = $this->getCorporationsCorporationIdContainersLogsWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdContainersLogsWithHttpInfo
     *
     * Get all corporation ALSC logs
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContainersLogs'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdContainersLogsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdContainersLogs'][0])
    {
        $request = $this->getCorporationsCorporationIdContainersLogsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdContainersLogsAsync
     *
     * Get all corporation ALSC logs
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContainersLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdContainersLogsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdContainersLogs'][0])
    {
        return $this->getCorporationsCorporationIdContainersLogsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdContainersLogsAsyncWithHttpInfo
     *
     * Get all corporation ALSC logs
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContainersLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdContainersLogsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdContainersLogs'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdContainersLogs200Ok[]';
        $request = $this->getCorporationsCorporationIdContainersLogsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdContainersLogs'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContainersLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdContainersLogsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdContainersLogs'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdContainersLogs'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdContainersLogs, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdContainersLogs, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v3/corporations/{corporation_id}/containers/logs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdDivisions
     *
     * Get corporation divisions
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdDivisions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdDivisions($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdDivisions'][0])
    {
        list($response) = $this->getCorporationsCorporationIdDivisionsWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdDivisionsWithHttpInfo
     *
     * Get corporation divisions
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdDivisions'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdDivisionsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdDivisions'][0])
    {
        $request = $this->getCorporationsCorporationIdDivisionsRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdDivisionsAsync
     *
     * Get corporation divisions
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdDivisions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdDivisionsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdDivisions'][0])
    {
        return $this->getCorporationsCorporationIdDivisionsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdDivisionsAsyncWithHttpInfo
     *
     * Get corporation divisions
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdDivisions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdDivisionsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdDivisions'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdDivisionsOk';
        $request = $this->getCorporationsCorporationIdDivisionsRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdDivisions'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdDivisions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdDivisionsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdDivisions'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdDivisions'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdDivisions, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/divisions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdFacilities
     *
     * Get corporation facilities
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdFacilities'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdFacilities($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdFacilities'][0])
    {
        list($response) = $this->getCorporationsCorporationIdFacilitiesWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdFacilitiesWithHttpInfo
     *
     * Get corporation facilities
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdFacilities'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdFacilitiesWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdFacilities'][0])
    {
        $request = $this->getCorporationsCorporationIdFacilitiesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdFacilitiesAsync
     *
     * Get corporation facilities
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdFacilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdFacilitiesAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdFacilities'][0])
    {
        return $this->getCorporationsCorporationIdFacilitiesAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdFacilitiesAsyncWithHttpInfo
     *
     * Get corporation facilities
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdFacilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdFacilitiesAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdFacilities'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdFacilities200Ok[]';
        $request = $this->getCorporationsCorporationIdFacilitiesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdFacilities'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdFacilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdFacilitiesRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdFacilities'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdFacilities'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdFacilities, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/facilities/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdIcons
     *
     * Get corporation icon
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdIcons'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdIcons($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdIcons'][0])
    {
        list($response) = $this->getCorporationsCorporationIdIconsWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdIconsWithHttpInfo
     *
     * Get corporation icon
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdIcons'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsNotFound|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdIconsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdIcons'][0])
    {
        $request = $this->getCorporationsCorporationIdIconsRequest($corporation_id, $datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsNotFound',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdIconsAsync
     *
     * Get corporation icon
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdIconsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdIcons'][0])
    {
        return $this->getCorporationsCorporationIdIconsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdIconsAsyncWithHttpInfo
     *
     * Get corporation icon
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdIconsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdIcons'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdIconsOk';
        $request = $this->getCorporationsCorporationIdIconsRequest($corporation_id, $datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdIcons'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdIconsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsCorporationIdIcons'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdIcons'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdIcons, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v1/corporations/{corporation_id}/icons/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMedals
     *
     * Get corporation medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedals'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMedals($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedals'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMedalsWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMedalsWithHttpInfo
     *
     * Get corporation medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedals'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMedalsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedals'][0])
    {
        $request = $this->getCorporationsCorporationIdMedalsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMedalsAsync
     *
     * Get corporation medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMedalsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedals'][0])
    {
        return $this->getCorporationsCorporationIdMedalsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMedalsAsyncWithHttpInfo
     *
     * Get corporation medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMedalsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedals'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedals200Ok[]';
        $request = $this->getCorporationsCorporationIdMedalsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMedals'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMedalsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedals'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMedals'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMedals, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdMedals, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/corporations/{corporation_id}/medals/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMedalsIssued
     *
     * Get corporation issued medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedalsIssued'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMedalsIssued($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedalsIssued'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMedalsIssuedWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMedalsIssuedWithHttpInfo
     *
     * Get corporation issued medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedalsIssued'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMedalsIssuedWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedalsIssued'][0])
    {
        $request = $this->getCorporationsCorporationIdMedalsIssuedRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMedalsIssuedAsync
     *
     * Get corporation issued medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedalsIssued'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMedalsIssuedAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedalsIssued'][0])
    {
        return $this->getCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo
     *
     * Get corporation issued medals
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedalsIssued'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMedalsIssuedAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedalsIssued'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMedalsIssued200Ok[]';
        $request = $this->getCorporationsCorporationIdMedalsIssuedRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMedalsIssued'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMedalsIssued'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMedalsIssuedRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMedalsIssued'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMedalsIssued'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMedalsIssued, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdMedalsIssued, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/corporations/{corporation_id}/medals/issued/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMembers
     *
     * Get corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMembers($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembers'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMembersWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMembersWithHttpInfo
     *
     * Get corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembers'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMembersWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembers'][0])
    {
        $request = $this->getCorporationsCorporationIdMembersRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMembersAsync
     *
     * Get corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembers'][0])
    {
        return $this->getCorporationsCorporationIdMembersAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMembersAsyncWithHttpInfo
     *
     * Get corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembers'][0])
    {
        $returnType = 'int[]';
        $request = $this->getCorporationsCorporationIdMembersRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMembers'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMembersRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembers'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMembers'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMembers, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v4/corporations/{corporation_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMembersLimit
     *
     * Get corporation member limit
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersLimit'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMembersLimit($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersLimit'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMembersLimitWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMembersLimitWithHttpInfo
     *
     * Get corporation member limit
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersLimit'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMembersLimitWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersLimit'][0])
    {
        $request = $this->getCorporationsCorporationIdMembersLimitRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMembersLimitAsync
     *
     * Get corporation member limit
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersLimitAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersLimit'][0])
    {
        return $this->getCorporationsCorporationIdMembersLimitAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMembersLimitAsyncWithHttpInfo
     *
     * Get corporation member limit
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersLimitAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersLimit'][0])
    {
        $returnType = 'int';
        $request = $this->getCorporationsCorporationIdMembersLimitRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMembersLimit'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMembersLimitRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersLimit'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMembersLimit'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMembersLimit, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/members/limit/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMembersTitles
     *
     * Get corporation&#39;s members&#39; titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersTitles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMembersTitles($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersTitles'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMembersTitlesWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMembersTitlesWithHttpInfo
     *
     * Get corporation&#39;s members&#39; titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersTitles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMembersTitlesWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersTitles'][0])
    {
        $request = $this->getCorporationsCorporationIdMembersTitlesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMembersTitlesAsync
     *
     * Get corporation&#39;s members&#39; titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersTitlesAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersTitles'][0])
    {
        return $this->getCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo
     *
     * Get corporation&#39;s members&#39; titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembersTitlesAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersTitles'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembersTitles200Ok[]';
        $request = $this->getCorporationsCorporationIdMembersTitlesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMembersTitles'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembersTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMembersTitlesRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembersTitles'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMembersTitles'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMembersTitles, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/members/titles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdMembertracking
     *
     * Track corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembertracking'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdMembertracking($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembertracking'][0])
    {
        list($response) = $this->getCorporationsCorporationIdMembertrackingWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMembertrackingWithHttpInfo
     *
     * Track corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembertracking'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdMembertrackingWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembertracking'][0])
    {
        $request = $this->getCorporationsCorporationIdMembertrackingRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMembertrackingAsync
     *
     * Track corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembertracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembertrackingAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembertracking'][0])
    {
        return $this->getCorporationsCorporationIdMembertrackingAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdMembertrackingAsyncWithHttpInfo
     *
     * Track corporation members
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembertracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdMembertrackingAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembertracking'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdMembertracking200Ok[]';
        $request = $this->getCorporationsCorporationIdMembertrackingRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdMembertracking'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdMembertracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdMembertrackingRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdMembertracking'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdMembertracking'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdMembertracking, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/membertracking/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdRoles
     *
     * Get corporation member roles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRoles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdRoles($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRoles'][0])
    {
        list($response) = $this->getCorporationsCorporationIdRolesWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdRolesWithHttpInfo
     *
     * Get corporation member roles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRoles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdRolesWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRoles'][0])
    {
        $request = $this->getCorporationsCorporationIdRolesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdRolesAsync
     *
     * Get corporation member roles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdRolesAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRoles'][0])
    {
        return $this->getCorporationsCorporationIdRolesAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdRolesAsyncWithHttpInfo
     *
     * Get corporation member roles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdRolesAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRoles'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRoles200Ok[]';
        $request = $this->getCorporationsCorporationIdRolesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdRoles'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdRolesRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRoles'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdRoles'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdRoles, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/roles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdRolesHistory
     *
     * Get corporation member roles history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRolesHistory'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdRolesHistory($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRolesHistory'][0])
    {
        list($response) = $this->getCorporationsCorporationIdRolesHistoryWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdRolesHistoryWithHttpInfo
     *
     * Get corporation member roles history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRolesHistory'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdRolesHistoryWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRolesHistory'][0])
    {
        $request = $this->getCorporationsCorporationIdRolesHistoryRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdRolesHistoryAsync
     *
     * Get corporation member roles history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRolesHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdRolesHistoryAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRolesHistory'][0])
    {
        return $this->getCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo
     *
     * Get corporation member roles history
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRolesHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdRolesHistoryAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRolesHistory'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdRolesHistory200Ok[]';
        $request = $this->getCorporationsCorporationIdRolesHistoryRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdRolesHistory'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdRolesHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdRolesHistoryRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdRolesHistory'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdRolesHistory'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdRolesHistory, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdRolesHistory, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/corporations/{corporation_id}/roles/history/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdShareholders
     *
     * Get corporation shareholders
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdShareholders'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdShareholders($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdShareholders'][0])
    {
        list($response) = $this->getCorporationsCorporationIdShareholdersWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdShareholdersWithHttpInfo
     *
     * Get corporation shareholders
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdShareholders'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdShareholdersWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdShareholders'][0])
    {
        $request = $this->getCorporationsCorporationIdShareholdersRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdShareholdersAsync
     *
     * Get corporation shareholders
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdShareholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdShareholdersAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdShareholders'][0])
    {
        return $this->getCorporationsCorporationIdShareholdersAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdShareholdersAsyncWithHttpInfo
     *
     * Get corporation shareholders
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdShareholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdShareholdersAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdShareholders'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdShareholders200Ok[]';
        $request = $this->getCorporationsCorporationIdShareholdersRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdShareholders'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdShareholders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdShareholdersRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdShareholders'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdShareholders'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdShareholders, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdShareholders, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/corporations/{corporation_id}/shareholders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdStandings
     *
     * Get corporation standings
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStandings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdStandings($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStandings'][0])
    {
        list($response) = $this->getCorporationsCorporationIdStandingsWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdStandingsWithHttpInfo
     *
     * Get corporation standings
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStandings'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdStandingsWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStandings'][0])
    {
        $request = $this->getCorporationsCorporationIdStandingsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdStandingsAsync
     *
     * Get corporation standings
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStandings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStandingsAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStandings'][0])
    {
        return $this->getCorporationsCorporationIdStandingsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdStandingsAsyncWithHttpInfo
     *
     * Get corporation standings
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStandings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStandingsAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStandings'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStandings200Ok[]';
        $request = $this->getCorporationsCorporationIdStandingsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdStandings'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStandings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdStandingsRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStandings'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdStandings'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdStandings, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdStandings, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/corporations/{corporation_id}/standings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdStarbases
     *
     * Get corporation starbases (POSes)
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbases'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdStarbases($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbases'][0])
    {
        list($response) = $this->getCorporationsCorporationIdStarbasesWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesWithHttpInfo
     *
     * Get corporation starbases (POSes)
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbases'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdStarbasesWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbases'][0])
    {
        $request = $this->getCorporationsCorporationIdStarbasesRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesAsync
     *
     * Get corporation starbases (POSes)
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStarbasesAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbases'][0])
    {
        return $this->getCorporationsCorporationIdStarbasesAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesAsyncWithHttpInfo
     *
     * Get corporation starbases (POSes)
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStarbasesAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbases'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbases200Ok[]';
        $request = $this->getCorporationsCorporationIdStarbasesRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdStarbases'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdStarbasesRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbases'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdStarbases'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdStarbases, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdStarbases, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/corporations/{corporation_id}/starbases/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesStarbaseId
     *
     * Get starbase (POS) detail
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  int $starbase_id An EVE starbase (POS) ID (required)
     * @param  int $system_id The solar system this starbase (POS) is located in, (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdStarbasesStarbaseId($corporation_id, $starbase_id, $system_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'][0])
    {
        list($response) = $this->getCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo($corporation_id, $starbase_id, $system_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo
     *
     * Get starbase (POS) detail
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  int $starbase_id An EVE starbase (POS) ID (required)
     * @param  int $system_id The solar system this starbase (POS) is located in, (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdStarbasesStarbaseIdWithHttpInfo($corporation_id, $starbase_id, $system_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'][0])
    {
        $request = $this->getCorporationsCorporationIdStarbasesStarbaseIdRequest($corporation_id, $starbase_id, $system_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesStarbaseIdAsync
     *
     * Get starbase (POS) detail
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  int $starbase_id An EVE starbase (POS) ID (required)
     * @param  int $system_id The solar system this starbase (POS) is located in, (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStarbasesStarbaseIdAsync($corporation_id, $starbase_id, $system_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'][0])
    {
        return $this->getCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo($corporation_id, $starbase_id, $system_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo
     *
     * Get starbase (POS) detail
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  int $starbase_id An EVE starbase (POS) ID (required)
     * @param  int $system_id The solar system this starbase (POS) is located in, (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStarbasesStarbaseIdAsyncWithHttpInfo($corporation_id, $starbase_id, $system_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStarbasesStarbaseIdOk';
        $request = $this->getCorporationsCorporationIdStarbasesStarbaseIdRequest($corporation_id, $starbase_id, $system_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdStarbasesStarbaseId'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  int $starbase_id An EVE starbase (POS) ID (required)
     * @param  int $system_id The solar system this starbase (POS) is located in, (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdStarbasesStarbaseIdRequest($corporation_id, $starbase_id, $system_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStarbasesStarbaseId'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdStarbasesStarbaseId'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdStarbasesStarbaseId, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'starbase_id' is set
        if ($starbase_id === null || (is_array($starbase_id) && count($starbase_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starbase_id when calling getCorporationsCorporationIdStarbasesStarbaseId'
            );
        }

        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling getCorporationsCorporationIdStarbasesStarbaseId'
            );
        }





        $resourcePath = '/v2/corporations/{corporation_id}/starbases/{starbase_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $system_id,
            'system_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }
        // path params
        if ($starbase_id !== null) {
            $resourcePath = str_replace(
                '{' . 'starbase_id' . '}',
                ObjectSerializer::toPathValue($starbase_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdStructures
     *
     * Get corporation structures
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStructures'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdStructures($corporation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStructures'][0])
    {
        list($response) = $this->getCorporationsCorporationIdStructuresWithHttpInfo($corporation_id, $accept_language, $datasource, $if_none_match, $language, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdStructuresWithHttpInfo
     *
     * Get corporation structures
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStructures'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdStructuresWithHttpInfo($corporation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStructures'][0])
    {
        $request = $this->getCorporationsCorporationIdStructuresRequest($corporation_id, $accept_language, $datasource, $if_none_match, $language, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdStructuresAsync
     *
     * Get corporation structures
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStructuresAsync($corporation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStructures'][0])
    {
        return $this->getCorporationsCorporationIdStructuresAsyncWithHttpInfo($corporation_id, $accept_language, $datasource, $if_none_match, $language, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdStructuresAsyncWithHttpInfo
     *
     * Get corporation structures
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdStructuresAsyncWithHttpInfo($corporation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStructures'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdStructures200Ok[]';
        $request = $this->getCorporationsCorporationIdStructuresRequest($corporation_id, $accept_language, $datasource, $if_none_match, $language, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdStructures'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $accept_language Language to use in the response (optional, default to 'en')
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $language Language to use in the response, takes precedence over Accept-Language (optional, default to 'en')
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdStructures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdStructuresRequest($corporation_id, $accept_language = 'en', $datasource = 'tranquility', $if_none_match = null, $language = 'en', $page = 1, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdStructures'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdStructures'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdStructures, must be bigger than or equal to 1.');
        }
        




        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CorporationApi.getCorporationsCorporationIdStructures, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v4/corporations/{corporation_id}/structures/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdTitles
     *
     * Get corporation titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdTitles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdTitles($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdTitles'][0])
    {
        list($response) = $this->getCorporationsCorporationIdTitlesWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdTitlesWithHttpInfo
     *
     * Get corporation titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdTitles'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\Unauthorized|\Swagger\Client\Eve\Model\Forbidden|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdTitlesWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdTitles'][0])
    {
        $request = $this->getCorporationsCorporationIdTitlesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdTitlesAsync
     *
     * Get corporation titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdTitlesAsync($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdTitles'][0])
    {
        return $this->getCorporationsCorporationIdTitlesAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdTitlesAsyncWithHttpInfo
     *
     * Get corporation titles
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdTitlesAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdTitles'][0])
    {
        $returnType = '\Swagger\Client\Eve\Model\GetCorporationsCorporationIdTitles200Ok[]';
        $request = $this->getCorporationsCorporationIdTitlesRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdTitles'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdTitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdTitlesRequest($corporation_id, $datasource = 'tranquility', $if_none_match = null, $token = null, string $contentType = self::contentTypes['getCorporationsCorporationIdTitles'][0])
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdTitles'
            );
        }
        if ($corporation_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporation_id" when calling CorporationApi.getCorporationsCorporationIdTitles, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v2/corporations/{corporation_id}/titles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsNpccorps
     *
     * Get npc corporations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsNpccorps'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout
     */
    public function getCorporationsNpccorps($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsNpccorps'][0])
    {
        list($response) = $this->getCorporationsNpccorpsWithHttpInfo($datasource, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsNpccorpsWithHttpInfo
     *
     * Get npc corporations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsNpccorps'] to see the possible values for this operation
     *
     * @throws \Swagger\Client\Eve\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[]|\Swagger\Client\Eve\Model\BadRequest|\Swagger\Client\Eve\Model\ErrorLimited|\Swagger\Client\Eve\Model\InternalServerError|\Swagger\Client\Eve\Model\ServiceUnavailable|\Swagger\Client\Eve\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsNpccorpsWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsNpccorps'][0])
    {
        $request = $this->getCorporationsNpccorpsRequest($datasource, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Eve\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCorporationsNpccorpsAsync
     *
     * Get npc corporations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsNpccorps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsNpccorpsAsync($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsNpccorps'][0])
    {
        return $this->getCorporationsNpccorpsAsyncWithHttpInfo($datasource, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsNpccorpsAsyncWithHttpInfo
     *
     * Get npc corporations
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsNpccorps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsNpccorpsAsyncWithHttpInfo($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsNpccorps'][0])
    {
        $returnType = 'int[]';
        $request = $this->getCorporationsNpccorpsRequest($datasource, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsNpccorps'
     *
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsNpccorps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsNpccorpsRequest($datasource = 'tranquility', $if_none_match = null, string $contentType = self::contentTypes['getCorporationsNpccorps'][0])
    {




        $resourcePath = '/v2/corporations/npccorps/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
