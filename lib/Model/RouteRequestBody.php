<?php
/**
 * RouteRequestBody
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-09-30
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Model;

use \ArrayAccess;
use \Tkhamez\Eve\API\ObjectSerializer;

/**
 * RouteRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RouteRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RouteRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avoid_systems' => 'int[]',
        'connections' => '\Tkhamez\Eve\API\Model\RouteConnection[]',
        'preference' => 'string',
        'security_penalty' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avoid_systems' => 'int64',
        'connections' => null,
        'preference' => null,
        'security_penalty' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'avoid_systems' => false,
        'connections' => false,
        'preference' => false,
        'security_penalty' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avoid_systems' => 'avoid_systems',
        'connections' => 'connections',
        'preference' => 'preference',
        'security_penalty' => 'security_penalty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avoid_systems' => 'setAvoidSystems',
        'connections' => 'setConnections',
        'preference' => 'setPreference',
        'security_penalty' => 'setSecurityPenalty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avoid_systems' => 'getAvoidSystems',
        'connections' => 'getConnections',
        'preference' => 'getPreference',
        'security_penalty' => 'getSecurityPenalty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PREFERENCE_SHORTER = 'Shorter';
    public const PREFERENCE_SAFER = 'Safer';
    public const PREFERENCE_LESS_SECURE = 'LessSecure';
    public const PREFERENCE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreferenceAllowableValues()
    {
        return [
            self::PREFERENCE_SHORTER,
            self::PREFERENCE_SAFER,
            self::PREFERENCE_LESS_SECURE,
            self::PREFERENCE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('avoid_systems', $data ?? [], null);
        $this->setIfExists('connections', $data ?? [], null);
        $this->setIfExists('preference', $data ?? [], 'Shorter');
        $this->setIfExists('security_penalty', $data ?? [], 50);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['avoid_systems']) && (count($this->container['avoid_systems']) > 1000)) {
            $invalidProperties[] = "invalid value for 'avoid_systems', number of items must be less than or equal to 1000.";
        }

        if (!is_null($this->container['connections']) && (count($this->container['connections']) > 1000)) {
            $invalidProperties[] = "invalid value for 'connections', number of items must be less than or equal to 1000.";
        }

        $allowedValues = $this->getPreferenceAllowableValues();
        if (!is_null($this->container['preference']) && !in_array($this->container['preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preference', must be one of '%s'",
                $this->container['preference'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['security_penalty']) && ($this->container['security_penalty'] > 100)) {
            $invalidProperties[] = "invalid value for 'security_penalty', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['security_penalty']) && ($this->container['security_penalty'] < 0)) {
            $invalidProperties[] = "invalid value for 'security_penalty', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avoid_systems
     *
     * @return int[]|null
     */
    public function getAvoidSystems()
    {
        return $this->container['avoid_systems'];
    }

    /**
     * Sets avoid_systems
     *
     * @param int[]|null $avoid_systems Systems to avoid
     *
     * @return self
     */
    public function setAvoidSystems($avoid_systems)
    {
        if (is_null($avoid_systems)) {
            throw new \InvalidArgumentException('non-nullable avoid_systems cannot be null');
        }

        if ((count($avoid_systems) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $avoid_systems when calling RouteRequestBody., number of items must be less than or equal to 1000.');
        }
        $this->container['avoid_systems'] = $avoid_systems;

        return $this;
    }

    /**
     * Gets connections
     *
     * @return \Tkhamez\Eve\API\Model\RouteConnection[]|null
     */
    public function getConnections()
    {
        return $this->container['connections'];
    }

    /**
     * Sets connections
     *
     * @param \Tkhamez\Eve\API\Model\RouteConnection[]|null $connections Additional one-way connections (like Jump Bridges) between systems
     *
     * @return self
     */
    public function setConnections($connections)
    {
        if (is_null($connections)) {
            throw new \InvalidArgumentException('non-nullable connections cannot be null');
        }

        if ((count($connections) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $connections when calling RouteRequestBody., number of items must be less than or equal to 1000.');
        }
        $this->container['connections'] = $connections;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return string|null
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param string|null $preference Preference for the route
     *
     * @return self
     */
    public function setPreference($preference)
    {
        if (is_null($preference)) {
            throw new \InvalidArgumentException('non-nullable preference cannot be null');
        }
        $allowedValues = $this->getPreferenceAllowableValues();
        if (!in_array($preference, $allowedValues, true)) {
            $preference = self::PREFERENCE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets security_penalty
     *
     * @return int|null
     */
    public function getSecurityPenalty()
    {
        return $this->container['security_penalty'];
    }

    /**
     * Sets security_penalty
     *
     * @param int|null $security_penalty Strictness of the path preference
     *
     * @return self
     */
    public function setSecurityPenalty($security_penalty)
    {
        if (is_null($security_penalty)) {
            throw new \InvalidArgumentException('non-nullable security_penalty cannot be null');
        }

        if (($security_penalty > 100)) {
            throw new \InvalidArgumentException('invalid value for $security_penalty when calling RouteRequestBody., must be smaller than or equal to 100.');
        }
        if (($security_penalty < 0)) {
            throw new \InvalidArgumentException('invalid value for $security_penalty when calling RouteRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['security_penalty'] = $security_penalty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


