<?php
/**
 * CharactersCharacterIdPlanetsPlanetIdGetPinsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Model;

use \ArrayAccess;
use \Tkhamez\Eve\API\ObjectSerializer;

/**
 * CharactersCharacterIdPlanetsPlanetIdGetPinsInner Class Doc Comment
 *
 * @category Class
 * @description pin object
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CharactersCharacterIdPlanetsPlanetIdGetPinsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CharactersCharacterIdPlanetsPlanetIdGet_pins_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contents' => '\Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerContentsInner[]',
        'expiry_time' => '\DateTime',
        'extractor_details' => '\Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails',
        'factory_details' => '\Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerFactoryDetails',
        'install_time' => '\DateTime',
        'last_cycle_start' => '\DateTime',
        'latitude' => 'float',
        'longitude' => 'float',
        'pin_id' => 'int',
        'schematic_id' => 'int',
        'type_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contents' => null,
        'expiry_time' => 'date-time',
        'extractor_details' => null,
        'factory_details' => null,
        'install_time' => 'date-time',
        'last_cycle_start' => 'date-time',
        'latitude' => 'double',
        'longitude' => 'double',
        'pin_id' => 'int64',
        'schematic_id' => 'int64',
        'type_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contents' => false,
        'expiry_time' => false,
        'extractor_details' => false,
        'factory_details' => false,
        'install_time' => false,
        'last_cycle_start' => false,
        'latitude' => false,
        'longitude' => false,
        'pin_id' => false,
        'schematic_id' => false,
        'type_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contents' => 'contents',
        'expiry_time' => 'expiry_time',
        'extractor_details' => 'extractor_details',
        'factory_details' => 'factory_details',
        'install_time' => 'install_time',
        'last_cycle_start' => 'last_cycle_start',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'pin_id' => 'pin_id',
        'schematic_id' => 'schematic_id',
        'type_id' => 'type_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contents' => 'setContents',
        'expiry_time' => 'setExpiryTime',
        'extractor_details' => 'setExtractorDetails',
        'factory_details' => 'setFactoryDetails',
        'install_time' => 'setInstallTime',
        'last_cycle_start' => 'setLastCycleStart',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'pin_id' => 'setPinId',
        'schematic_id' => 'setSchematicId',
        'type_id' => 'setTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contents' => 'getContents',
        'expiry_time' => 'getExpiryTime',
        'extractor_details' => 'getExtractorDetails',
        'factory_details' => 'getFactoryDetails',
        'install_time' => 'getInstallTime',
        'last_cycle_start' => 'getLastCycleStart',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'pin_id' => 'getPinId',
        'schematic_id' => 'getSchematicId',
        'type_id' => 'getTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contents', $data ?? [], null);
        $this->setIfExists('expiry_time', $data ?? [], null);
        $this->setIfExists('extractor_details', $data ?? [], null);
        $this->setIfExists('factory_details', $data ?? [], null);
        $this->setIfExists('install_time', $data ?? [], null);
        $this->setIfExists('last_cycle_start', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('pin_id', $data ?? [], null);
        $this->setIfExists('schematic_id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['pin_id'] === null) {
            $invalidProperties[] = "'pin_id' can't be null";
        }
        if ($this->container['type_id'] === null) {
            $invalidProperties[] = "'type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contents
     *
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerContentsInner[]|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerContentsInner[]|null $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets expiry_time
     *
     * @return \DateTime|null
     */
    public function getExpiryTime()
    {
        return $this->container['expiry_time'];
    }

    /**
     * Sets expiry_time
     *
     * @param \DateTime|null $expiry_time expiry_time
     *
     * @return self
     */
    public function setExpiryTime($expiry_time)
    {
        if (is_null($expiry_time)) {
            throw new \InvalidArgumentException('non-nullable expiry_time cannot be null');
        }
        $this->container['expiry_time'] = $expiry_time;

        return $this;
    }

    /**
     * Gets extractor_details
     *
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails|null
     */
    public function getExtractorDetails()
    {
        return $this->container['extractor_details'];
    }

    /**
     * Sets extractor_details
     *
     * @param \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails|null $extractor_details extractor_details
     *
     * @return self
     */
    public function setExtractorDetails($extractor_details)
    {
        if (is_null($extractor_details)) {
            throw new \InvalidArgumentException('non-nullable extractor_details cannot be null');
        }
        $this->container['extractor_details'] = $extractor_details;

        return $this;
    }

    /**
     * Gets factory_details
     *
     * @return \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerFactoryDetails|null
     */
    public function getFactoryDetails()
    {
        return $this->container['factory_details'];
    }

    /**
     * Sets factory_details
     *
     * @param \Tkhamez\Eve\API\Model\CharactersCharacterIdPlanetsPlanetIdGetPinsInnerFactoryDetails|null $factory_details factory_details
     *
     * @return self
     */
    public function setFactoryDetails($factory_details)
    {
        if (is_null($factory_details)) {
            throw new \InvalidArgumentException('non-nullable factory_details cannot be null');
        }
        $this->container['factory_details'] = $factory_details;

        return $this;
    }

    /**
     * Gets install_time
     *
     * @return \DateTime|null
     */
    public function getInstallTime()
    {
        return $this->container['install_time'];
    }

    /**
     * Sets install_time
     *
     * @param \DateTime|null $install_time install_time
     *
     * @return self
     */
    public function setInstallTime($install_time)
    {
        if (is_null($install_time)) {
            throw new \InvalidArgumentException('non-nullable install_time cannot be null');
        }
        $this->container['install_time'] = $install_time;

        return $this;
    }

    /**
     * Gets last_cycle_start
     *
     * @return \DateTime|null
     */
    public function getLastCycleStart()
    {
        return $this->container['last_cycle_start'];
    }

    /**
     * Sets last_cycle_start
     *
     * @param \DateTime|null $last_cycle_start last_cycle_start
     *
     * @return self
     */
    public function setLastCycleStart($last_cycle_start)
    {
        if (is_null($last_cycle_start)) {
            throw new \InvalidArgumentException('non-nullable last_cycle_start cannot be null');
        }
        $this->container['last_cycle_start'] = $last_cycle_start;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets pin_id
     *
     * @return int
     */
    public function getPinId()
    {
        return $this->container['pin_id'];
    }

    /**
     * Sets pin_id
     *
     * @param int $pin_id pin_id
     *
     * @return self
     */
    public function setPinId($pin_id)
    {
        if (is_null($pin_id)) {
            throw new \InvalidArgumentException('non-nullable pin_id cannot be null');
        }
        $this->container['pin_id'] = $pin_id;

        return $this;
    }

    /**
     * Gets schematic_id
     *
     * @return int|null
     */
    public function getSchematicId()
    {
        return $this->container['schematic_id'];
    }

    /**
     * Sets schematic_id
     *
     * @param int|null $schematic_id schematic_id
     *
     * @return self
     */
    public function setSchematicId($schematic_id)
    {
        if (is_null($schematic_id)) {
            throw new \InvalidArgumentException('non-nullable schematic_id cannot be null');
        }
        $this->container['schematic_id'] = $schematic_id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


