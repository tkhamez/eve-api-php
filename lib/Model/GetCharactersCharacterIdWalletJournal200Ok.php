<?php
/**
 * GetCharactersCharacterIdWalletJournal200Ok
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Swagger\Client\Eve\Model;

use \ArrayAccess;
use \Swagger\Client\Eve\ObjectSerializer;

/**
 * GetCharactersCharacterIdWalletJournal200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  Swagger\Client\Eve
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCharactersCharacterIdWalletJournal200Ok implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_characters_character_id_wallet_journal_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'balance' => 'float',
        'context_id' => 'int',
        'context_id_type' => 'string',
        'date' => '\DateTime',
        'description' => 'string',
        'first_party_id' => 'int',
        'id' => 'int',
        'reason' => 'string',
        'ref_type' => 'string',
        'second_party_id' => 'int',
        'tax' => 'float',
        'tax_receiver_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'balance' => 'double',
        'context_id' => 'int64',
        'context_id_type' => null,
        'date' => 'date-time',
        'description' => null,
        'first_party_id' => 'int32',
        'id' => 'int64',
        'reason' => null,
        'ref_type' => null,
        'second_party_id' => 'int32',
        'tax' => 'double',
        'tax_receiver_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'balance' => false,
        'context_id' => false,
        'context_id_type' => false,
        'date' => false,
        'description' => false,
        'first_party_id' => false,
        'id' => false,
        'reason' => false,
        'ref_type' => false,
        'second_party_id' => false,
        'tax' => false,
        'tax_receiver_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'balance' => 'balance',
        'context_id' => 'context_id',
        'context_id_type' => 'context_id_type',
        'date' => 'date',
        'description' => 'description',
        'first_party_id' => 'first_party_id',
        'id' => 'id',
        'reason' => 'reason',
        'ref_type' => 'ref_type',
        'second_party_id' => 'second_party_id',
        'tax' => 'tax',
        'tax_receiver_id' => 'tax_receiver_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'context_id' => 'setContextId',
        'context_id_type' => 'setContextIdType',
        'date' => 'setDate',
        'description' => 'setDescription',
        'first_party_id' => 'setFirstPartyId',
        'id' => 'setId',
        'reason' => 'setReason',
        'ref_type' => 'setRefType',
        'second_party_id' => 'setSecondPartyId',
        'tax' => 'setTax',
        'tax_receiver_id' => 'setTaxReceiverId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'context_id' => 'getContextId',
        'context_id_type' => 'getContextIdType',
        'date' => 'getDate',
        'description' => 'getDescription',
        'first_party_id' => 'getFirstPartyId',
        'id' => 'getId',
        'reason' => 'getReason',
        'ref_type' => 'getRefType',
        'second_party_id' => 'getSecondPartyId',
        'tax' => 'getTax',
        'tax_receiver_id' => 'getTaxReceiverId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTEXT_ID_TYPE_STRUCTURE_ID = 'structure_id';
    public const CONTEXT_ID_TYPE_STATION_ID = 'station_id';
    public const CONTEXT_ID_TYPE_MARKET_TRANSACTION_ID = 'market_transaction_id';
    public const CONTEXT_ID_TYPE_CHARACTER_ID = 'character_id';
    public const CONTEXT_ID_TYPE_CORPORATION_ID = 'corporation_id';
    public const CONTEXT_ID_TYPE_ALLIANCE_ID = 'alliance_id';
    public const CONTEXT_ID_TYPE_EVE_SYSTEM = 'eve_system';
    public const CONTEXT_ID_TYPE_INDUSTRY_JOB_ID = 'industry_job_id';
    public const CONTEXT_ID_TYPE_CONTRACT_ID = 'contract_id';
    public const CONTEXT_ID_TYPE_PLANET_ID = 'planet_id';
    public const CONTEXT_ID_TYPE_SYSTEM_ID = 'system_id';
    public const CONTEXT_ID_TYPE_TYPE_ID = 'type_id';
    public const REF_TYPE_ACCELERATION_GATE_FEE = 'acceleration_gate_fee';
    public const REF_TYPE_ADVERTISEMENT_LISTING_FEE = 'advertisement_listing_fee';
    public const REF_TYPE_AGENT_DONATION = 'agent_donation';
    public const REF_TYPE_AGENT_LOCATION_SERVICES = 'agent_location_services';
    public const REF_TYPE_AGENT_MISCELLANEOUS = 'agent_miscellaneous';
    public const REF_TYPE_AGENT_MISSION_COLLATERAL_PAID = 'agent_mission_collateral_paid';
    public const REF_TYPE_AGENT_MISSION_COLLATERAL_REFUNDED = 'agent_mission_collateral_refunded';
    public const REF_TYPE_AGENT_MISSION_REWARD = 'agent_mission_reward';
    public const REF_TYPE_AGENT_MISSION_REWARD_CORPORATION_TAX = 'agent_mission_reward_corporation_tax';
    public const REF_TYPE_AGENT_MISSION_TIME_BONUS_REWARD = 'agent_mission_time_bonus_reward';
    public const REF_TYPE_AGENT_MISSION_TIME_BONUS_REWARD_CORPORATION_TAX = 'agent_mission_time_bonus_reward_corporation_tax';
    public const REF_TYPE_AGENT_SECURITY_SERVICES = 'agent_security_services';
    public const REF_TYPE_AGENT_SERVICES_RENDERED = 'agent_services_rendered';
    public const REF_TYPE_AGENTS_PREWARD = 'agents_preward';
    public const REF_TYPE_ALLIANCE_MAINTAINANCE_FEE = 'alliance_maintainance_fee';
    public const REF_TYPE_ALLIANCE_REGISTRATION_FEE = 'alliance_registration_fee';
    public const REF_TYPE_ALLIGNMENT_BASED_GATE_TOLL = 'allignment_based_gate_toll';
    public const REF_TYPE_ASSET_SAFETY_RECOVERY_TAX = 'asset_safety_recovery_tax';
    public const REF_TYPE_BOUNTY = 'bounty';
    public const REF_TYPE_BOUNTY_PRIZE = 'bounty_prize';
    public const REF_TYPE_BOUNTY_PRIZE_CORPORATION_TAX = 'bounty_prize_corporation_tax';
    public const REF_TYPE_BOUNTY_PRIZES = 'bounty_prizes';
    public const REF_TYPE_BOUNTY_REIMBURSEMENT = 'bounty_reimbursement';
    public const REF_TYPE_BOUNTY_SURCHARGE = 'bounty_surcharge';
    public const REF_TYPE_BROKERS_FEE = 'brokers_fee';
    public const REF_TYPE_CLONE_ACTIVATION = 'clone_activation';
    public const REF_TYPE_CLONE_TRANSFER = 'clone_transfer';
    public const REF_TYPE_CONTRABAND_FINE = 'contraband_fine';
    public const REF_TYPE_CONTRACT_AUCTION_BID = 'contract_auction_bid';
    public const REF_TYPE_CONTRACT_AUCTION_BID_CORP = 'contract_auction_bid_corp';
    public const REF_TYPE_CONTRACT_AUCTION_BID_REFUND = 'contract_auction_bid_refund';
    public const REF_TYPE_CONTRACT_AUCTION_SOLD = 'contract_auction_sold';
    public const REF_TYPE_CONTRACT_BROKERS_FEE = 'contract_brokers_fee';
    public const REF_TYPE_CONTRACT_BROKERS_FEE_CORP = 'contract_brokers_fee_corp';
    public const REF_TYPE_CONTRACT_COLLATERAL = 'contract_collateral';
    public const REF_TYPE_CONTRACT_COLLATERAL_DEPOSITED_CORP = 'contract_collateral_deposited_corp';
    public const REF_TYPE_CONTRACT_COLLATERAL_PAYOUT = 'contract_collateral_payout';
    public const REF_TYPE_CONTRACT_COLLATERAL_REFUND = 'contract_collateral_refund';
    public const REF_TYPE_CONTRACT_DEPOSIT = 'contract_deposit';
    public const REF_TYPE_CONTRACT_DEPOSIT_CORP = 'contract_deposit_corp';
    public const REF_TYPE_CONTRACT_DEPOSIT_REFUND = 'contract_deposit_refund';
    public const REF_TYPE_CONTRACT_DEPOSIT_SALES_TAX = 'contract_deposit_sales_tax';
    public const REF_TYPE_CONTRACT_PRICE = 'contract_price';
    public const REF_TYPE_CONTRACT_PRICE_PAYMENT_CORP = 'contract_price_payment_corp';
    public const REF_TYPE_CONTRACT_REVERSAL = 'contract_reversal';
    public const REF_TYPE_CONTRACT_REWARD = 'contract_reward';
    public const REF_TYPE_CONTRACT_REWARD_DEPOSITED = 'contract_reward_deposited';
    public const REF_TYPE_CONTRACT_REWARD_DEPOSITED_CORP = 'contract_reward_deposited_corp';
    public const REF_TYPE_CONTRACT_REWARD_REFUND = 'contract_reward_refund';
    public const REF_TYPE_CONTRACT_SALES_TAX = 'contract_sales_tax';
    public const REF_TYPE_COPYING = 'copying';
    public const REF_TYPE_CORPORATE_REWARD_PAYOUT = 'corporate_reward_payout';
    public const REF_TYPE_CORPORATE_REWARD_TAX = 'corporate_reward_tax';
    public const REF_TYPE_CORPORATION_ACCOUNT_WITHDRAWAL = 'corporation_account_withdrawal';
    public const REF_TYPE_CORPORATION_BULK_PAYMENT = 'corporation_bulk_payment';
    public const REF_TYPE_CORPORATION_DIVIDEND_PAYMENT = 'corporation_dividend_payment';
    public const REF_TYPE_CORPORATION_LIQUIDATION = 'corporation_liquidation';
    public const REF_TYPE_CORPORATION_LOGO_CHANGE_COST = 'corporation_logo_change_cost';
    public const REF_TYPE_CORPORATION_PAYMENT = 'corporation_payment';
    public const REF_TYPE_CORPORATION_REGISTRATION_FEE = 'corporation_registration_fee';
    public const REF_TYPE_COSMETIC_MARKET_COMPONENT_ITEM_PURCHASE = 'cosmetic_market_component_item_purchase';
    public const REF_TYPE_COSMETIC_MARKET_SKIN_PURCHASE = 'cosmetic_market_skin_purchase';
    public const REF_TYPE_COSMETIC_MARKET_SKIN_SALE = 'cosmetic_market_skin_sale';
    public const REF_TYPE_COSMETIC_MARKET_SKIN_SALE_BROKER_FEE = 'cosmetic_market_skin_sale_broker_fee';
    public const REF_TYPE_COSMETIC_MARKET_SKIN_SALE_TAX = 'cosmetic_market_skin_sale_tax';
    public const REF_TYPE_COSMETIC_MARKET_SKIN_TRANSACTION = 'cosmetic_market_skin_transaction';
    public const REF_TYPE_COURIER_MISSION_ESCROW = 'courier_mission_escrow';
    public const REF_TYPE_CSPA = 'cspa';
    public const REF_TYPE_CSPAOFFLINEREFUND = 'cspaofflinerefund';
    public const REF_TYPE_DAILY_CHALLENGE_REWARD = 'daily_challenge_reward';
    public const REF_TYPE_DAILY_GOAL_PAYOUTS = 'daily_goal_payouts';
    public const REF_TYPE_DAILY_GOAL_PAYOUTS_TAX = 'daily_goal_payouts_tax';
    public const REF_TYPE_DATACORE_FEE = 'datacore_fee';
    public const REF_TYPE_DNA_MODIFICATION_FEE = 'dna_modification_fee';
    public const REF_TYPE_DOCKING_FEE = 'docking_fee';
    public const REF_TYPE_DUEL_WAGER_ESCROW = 'duel_wager_escrow';
    public const REF_TYPE_DUEL_WAGER_PAYMENT = 'duel_wager_payment';
    public const REF_TYPE_DUEL_WAGER_REFUND = 'duel_wager_refund';
    public const REF_TYPE_ESS_ESCROW_TRANSFER = 'ess_escrow_transfer';
    public const REF_TYPE_EXTERNAL_TRADE_DELIVERY = 'external_trade_delivery';
    public const REF_TYPE_EXTERNAL_TRADE_FREEZE = 'external_trade_freeze';
    public const REF_TYPE_EXTERNAL_TRADE_THAW = 'external_trade_thaw';
    public const REF_TYPE_FACTORY_SLOT_RENTAL_FEE = 'factory_slot_rental_fee';
    public const REF_TYPE_FLUX_PAYOUT = 'flux_payout';
    public const REF_TYPE_FLUX_TAX = 'flux_tax';
    public const REF_TYPE_FLUX_TICKET_REPAYMENT = 'flux_ticket_repayment';
    public const REF_TYPE_FLUX_TICKET_SALE = 'flux_ticket_sale';
    public const REF_TYPE_GM_CASH_TRANSFER = 'gm_cash_transfer';
    public const REF_TYPE_INDUSTRY_JOB_TAX = 'industry_job_tax';
    public const REF_TYPE_INFRASTRUCTURE_HUB_MAINTENANCE = 'infrastructure_hub_maintenance';
    public const REF_TYPE_INHERITANCE = 'inheritance';
    public const REF_TYPE_INSURANCE = 'insurance';
    public const REF_TYPE_INSURGENCY_CORRUPTION_CONTRIBUTION_REWARD = 'insurgency_corruption_contribution_reward';
    public const REF_TYPE_INSURGENCY_SUPPRESSION_CONTRIBUTION_REWARD = 'insurgency_suppression_contribution_reward';
    public const REF_TYPE_ITEM_TRADER_PAYMENT = 'item_trader_payment';
    public const REF_TYPE_JUMP_CLONE_ACTIVATION_FEE = 'jump_clone_activation_fee';
    public const REF_TYPE_JUMP_CLONE_INSTALLATION_FEE = 'jump_clone_installation_fee';
    public const REF_TYPE_KILL_RIGHT_FEE = 'kill_right_fee';
    public const REF_TYPE_LP_STORE = 'lp_store';
    public const REF_TYPE_MANUFACTURING = 'manufacturing';
    public const REF_TYPE_MARKET_ESCROW = 'market_escrow';
    public const REF_TYPE_MARKET_FINE_PAID = 'market_fine_paid';
    public const REF_TYPE_MARKET_PROVIDER_TAX = 'market_provider_tax';
    public const REF_TYPE_MARKET_TRANSACTION = 'market_transaction';
    public const REF_TYPE_MEDAL_CREATION = 'medal_creation';
    public const REF_TYPE_MEDAL_ISSUED = 'medal_issued';
    public const REF_TYPE_MILESTONE_REWARD_PAYMENT = 'milestone_reward_payment';
    public const REF_TYPE_MISSION_COMPLETION = 'mission_completion';
    public const REF_TYPE_MISSION_COST = 'mission_cost';
    public const REF_TYPE_MISSION_EXPIRATION = 'mission_expiration';
    public const REF_TYPE_MISSION_REWARD = 'mission_reward';
    public const REF_TYPE_OFFICE_RENTAL_FEE = 'office_rental_fee';
    public const REF_TYPE_OPERATION_BONUS = 'operation_bonus';
    public const REF_TYPE_OPPORTUNITY_REWARD = 'opportunity_reward';
    public const REF_TYPE_PLANETARY_CONSTRUCTION = 'planetary_construction';
    public const REF_TYPE_PLANETARY_EXPORT_TAX = 'planetary_export_tax';
    public const REF_TYPE_PLANETARY_IMPORT_TAX = 'planetary_import_tax';
    public const REF_TYPE_PLAYER_DONATION = 'player_donation';
    public const REF_TYPE_PLAYER_TRADING = 'player_trading';
    public const REF_TYPE_PROJECT_DISCOVERY_REWARD = 'project_discovery_reward';
    public const REF_TYPE_PROJECT_DISCOVERY_TAX = 'project_discovery_tax';
    public const REF_TYPE_PROJECT_PAYOUTS = 'project_payouts';
    public const REF_TYPE_REACTION = 'reaction';
    public const REF_TYPE_REDEEMED_ISK_TOKEN = 'redeemed_isk_token';
    public const REF_TYPE_RELEASE_OF_IMPOUNDED_PROPERTY = 'release_of_impounded_property';
    public const REF_TYPE_REPAIR_BILL = 'repair_bill';
    public const REF_TYPE_REPROCESSING_TAX = 'reprocessing_tax';
    public const REF_TYPE_RESEARCHING_MATERIAL_PRODUCTIVITY = 'researching_material_productivity';
    public const REF_TYPE_RESEARCHING_TECHNOLOGY = 'researching_technology';
    public const REF_TYPE_RESEARCHING_TIME_PRODUCTIVITY = 'researching_time_productivity';
    public const REF_TYPE_RESOURCE_WARS_REWARD = 'resource_wars_reward';
    public const REF_TYPE_REVERSE_ENGINEERING = 'reverse_engineering';
    public const REF_TYPE_SEASON_CHALLENGE_REWARD = 'season_challenge_reward';
    public const REF_TYPE_SECURITY_PROCESSING_FEE = 'security_processing_fee';
    public const REF_TYPE_SHARES = 'shares';
    public const REF_TYPE_SKILL_PURCHASE = 'skill_purchase';
    public const REF_TYPE_SOVEREIGNITY_BILL = 'sovereignity_bill';
    public const REF_TYPE_STORE_PURCHASE = 'store_purchase';
    public const REF_TYPE_STORE_PURCHASE_REFUND = 'store_purchase_refund';
    public const REF_TYPE_STRUCTURE_GATE_JUMP = 'structure_gate_jump';
    public const REF_TYPE_TRANSACTION_TAX = 'transaction_tax';
    public const REF_TYPE_UNDER_CONSTRUCTION = 'under_construction';
    public const REF_TYPE_UPKEEP_ADJUSTMENT_FEE = 'upkeep_adjustment_fee';
    public const REF_TYPE_WAR_ALLY_CONTRACT = 'war_ally_contract';
    public const REF_TYPE_WAR_FEE = 'war_fee';
    public const REF_TYPE_WAR_FEE_SURRENDER = 'war_fee_surrender';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContextIdTypeAllowableValues()
    {
        return [
            self::CONTEXT_ID_TYPE_STRUCTURE_ID,
            self::CONTEXT_ID_TYPE_STATION_ID,
            self::CONTEXT_ID_TYPE_MARKET_TRANSACTION_ID,
            self::CONTEXT_ID_TYPE_CHARACTER_ID,
            self::CONTEXT_ID_TYPE_CORPORATION_ID,
            self::CONTEXT_ID_TYPE_ALLIANCE_ID,
            self::CONTEXT_ID_TYPE_EVE_SYSTEM,
            self::CONTEXT_ID_TYPE_INDUSTRY_JOB_ID,
            self::CONTEXT_ID_TYPE_CONTRACT_ID,
            self::CONTEXT_ID_TYPE_PLANET_ID,
            self::CONTEXT_ID_TYPE_SYSTEM_ID,
            self::CONTEXT_ID_TYPE_TYPE_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefTypeAllowableValues()
    {
        return [
            self::REF_TYPE_ACCELERATION_GATE_FEE,
            self::REF_TYPE_ADVERTISEMENT_LISTING_FEE,
            self::REF_TYPE_AGENT_DONATION,
            self::REF_TYPE_AGENT_LOCATION_SERVICES,
            self::REF_TYPE_AGENT_MISCELLANEOUS,
            self::REF_TYPE_AGENT_MISSION_COLLATERAL_PAID,
            self::REF_TYPE_AGENT_MISSION_COLLATERAL_REFUNDED,
            self::REF_TYPE_AGENT_MISSION_REWARD,
            self::REF_TYPE_AGENT_MISSION_REWARD_CORPORATION_TAX,
            self::REF_TYPE_AGENT_MISSION_TIME_BONUS_REWARD,
            self::REF_TYPE_AGENT_MISSION_TIME_BONUS_REWARD_CORPORATION_TAX,
            self::REF_TYPE_AGENT_SECURITY_SERVICES,
            self::REF_TYPE_AGENT_SERVICES_RENDERED,
            self::REF_TYPE_AGENTS_PREWARD,
            self::REF_TYPE_ALLIANCE_MAINTAINANCE_FEE,
            self::REF_TYPE_ALLIANCE_REGISTRATION_FEE,
            self::REF_TYPE_ALLIGNMENT_BASED_GATE_TOLL,
            self::REF_TYPE_ASSET_SAFETY_RECOVERY_TAX,
            self::REF_TYPE_BOUNTY,
            self::REF_TYPE_BOUNTY_PRIZE,
            self::REF_TYPE_BOUNTY_PRIZE_CORPORATION_TAX,
            self::REF_TYPE_BOUNTY_PRIZES,
            self::REF_TYPE_BOUNTY_REIMBURSEMENT,
            self::REF_TYPE_BOUNTY_SURCHARGE,
            self::REF_TYPE_BROKERS_FEE,
            self::REF_TYPE_CLONE_ACTIVATION,
            self::REF_TYPE_CLONE_TRANSFER,
            self::REF_TYPE_CONTRABAND_FINE,
            self::REF_TYPE_CONTRACT_AUCTION_BID,
            self::REF_TYPE_CONTRACT_AUCTION_BID_CORP,
            self::REF_TYPE_CONTRACT_AUCTION_BID_REFUND,
            self::REF_TYPE_CONTRACT_AUCTION_SOLD,
            self::REF_TYPE_CONTRACT_BROKERS_FEE,
            self::REF_TYPE_CONTRACT_BROKERS_FEE_CORP,
            self::REF_TYPE_CONTRACT_COLLATERAL,
            self::REF_TYPE_CONTRACT_COLLATERAL_DEPOSITED_CORP,
            self::REF_TYPE_CONTRACT_COLLATERAL_PAYOUT,
            self::REF_TYPE_CONTRACT_COLLATERAL_REFUND,
            self::REF_TYPE_CONTRACT_DEPOSIT,
            self::REF_TYPE_CONTRACT_DEPOSIT_CORP,
            self::REF_TYPE_CONTRACT_DEPOSIT_REFUND,
            self::REF_TYPE_CONTRACT_DEPOSIT_SALES_TAX,
            self::REF_TYPE_CONTRACT_PRICE,
            self::REF_TYPE_CONTRACT_PRICE_PAYMENT_CORP,
            self::REF_TYPE_CONTRACT_REVERSAL,
            self::REF_TYPE_CONTRACT_REWARD,
            self::REF_TYPE_CONTRACT_REWARD_DEPOSITED,
            self::REF_TYPE_CONTRACT_REWARD_DEPOSITED_CORP,
            self::REF_TYPE_CONTRACT_REWARD_REFUND,
            self::REF_TYPE_CONTRACT_SALES_TAX,
            self::REF_TYPE_COPYING,
            self::REF_TYPE_CORPORATE_REWARD_PAYOUT,
            self::REF_TYPE_CORPORATE_REWARD_TAX,
            self::REF_TYPE_CORPORATION_ACCOUNT_WITHDRAWAL,
            self::REF_TYPE_CORPORATION_BULK_PAYMENT,
            self::REF_TYPE_CORPORATION_DIVIDEND_PAYMENT,
            self::REF_TYPE_CORPORATION_LIQUIDATION,
            self::REF_TYPE_CORPORATION_LOGO_CHANGE_COST,
            self::REF_TYPE_CORPORATION_PAYMENT,
            self::REF_TYPE_CORPORATION_REGISTRATION_FEE,
            self::REF_TYPE_COSMETIC_MARKET_COMPONENT_ITEM_PURCHASE,
            self::REF_TYPE_COSMETIC_MARKET_SKIN_PURCHASE,
            self::REF_TYPE_COSMETIC_MARKET_SKIN_SALE,
            self::REF_TYPE_COSMETIC_MARKET_SKIN_SALE_BROKER_FEE,
            self::REF_TYPE_COSMETIC_MARKET_SKIN_SALE_TAX,
            self::REF_TYPE_COSMETIC_MARKET_SKIN_TRANSACTION,
            self::REF_TYPE_COURIER_MISSION_ESCROW,
            self::REF_TYPE_CSPA,
            self::REF_TYPE_CSPAOFFLINEREFUND,
            self::REF_TYPE_DAILY_CHALLENGE_REWARD,
            self::REF_TYPE_DAILY_GOAL_PAYOUTS,
            self::REF_TYPE_DAILY_GOAL_PAYOUTS_TAX,
            self::REF_TYPE_DATACORE_FEE,
            self::REF_TYPE_DNA_MODIFICATION_FEE,
            self::REF_TYPE_DOCKING_FEE,
            self::REF_TYPE_DUEL_WAGER_ESCROW,
            self::REF_TYPE_DUEL_WAGER_PAYMENT,
            self::REF_TYPE_DUEL_WAGER_REFUND,
            self::REF_TYPE_ESS_ESCROW_TRANSFER,
            self::REF_TYPE_EXTERNAL_TRADE_DELIVERY,
            self::REF_TYPE_EXTERNAL_TRADE_FREEZE,
            self::REF_TYPE_EXTERNAL_TRADE_THAW,
            self::REF_TYPE_FACTORY_SLOT_RENTAL_FEE,
            self::REF_TYPE_FLUX_PAYOUT,
            self::REF_TYPE_FLUX_TAX,
            self::REF_TYPE_FLUX_TICKET_REPAYMENT,
            self::REF_TYPE_FLUX_TICKET_SALE,
            self::REF_TYPE_GM_CASH_TRANSFER,
            self::REF_TYPE_INDUSTRY_JOB_TAX,
            self::REF_TYPE_INFRASTRUCTURE_HUB_MAINTENANCE,
            self::REF_TYPE_INHERITANCE,
            self::REF_TYPE_INSURANCE,
            self::REF_TYPE_INSURGENCY_CORRUPTION_CONTRIBUTION_REWARD,
            self::REF_TYPE_INSURGENCY_SUPPRESSION_CONTRIBUTION_REWARD,
            self::REF_TYPE_ITEM_TRADER_PAYMENT,
            self::REF_TYPE_JUMP_CLONE_ACTIVATION_FEE,
            self::REF_TYPE_JUMP_CLONE_INSTALLATION_FEE,
            self::REF_TYPE_KILL_RIGHT_FEE,
            self::REF_TYPE_LP_STORE,
            self::REF_TYPE_MANUFACTURING,
            self::REF_TYPE_MARKET_ESCROW,
            self::REF_TYPE_MARKET_FINE_PAID,
            self::REF_TYPE_MARKET_PROVIDER_TAX,
            self::REF_TYPE_MARKET_TRANSACTION,
            self::REF_TYPE_MEDAL_CREATION,
            self::REF_TYPE_MEDAL_ISSUED,
            self::REF_TYPE_MILESTONE_REWARD_PAYMENT,
            self::REF_TYPE_MISSION_COMPLETION,
            self::REF_TYPE_MISSION_COST,
            self::REF_TYPE_MISSION_EXPIRATION,
            self::REF_TYPE_MISSION_REWARD,
            self::REF_TYPE_OFFICE_RENTAL_FEE,
            self::REF_TYPE_OPERATION_BONUS,
            self::REF_TYPE_OPPORTUNITY_REWARD,
            self::REF_TYPE_PLANETARY_CONSTRUCTION,
            self::REF_TYPE_PLANETARY_EXPORT_TAX,
            self::REF_TYPE_PLANETARY_IMPORT_TAX,
            self::REF_TYPE_PLAYER_DONATION,
            self::REF_TYPE_PLAYER_TRADING,
            self::REF_TYPE_PROJECT_DISCOVERY_REWARD,
            self::REF_TYPE_PROJECT_DISCOVERY_TAX,
            self::REF_TYPE_PROJECT_PAYOUTS,
            self::REF_TYPE_REACTION,
            self::REF_TYPE_REDEEMED_ISK_TOKEN,
            self::REF_TYPE_RELEASE_OF_IMPOUNDED_PROPERTY,
            self::REF_TYPE_REPAIR_BILL,
            self::REF_TYPE_REPROCESSING_TAX,
            self::REF_TYPE_RESEARCHING_MATERIAL_PRODUCTIVITY,
            self::REF_TYPE_RESEARCHING_TECHNOLOGY,
            self::REF_TYPE_RESEARCHING_TIME_PRODUCTIVITY,
            self::REF_TYPE_RESOURCE_WARS_REWARD,
            self::REF_TYPE_REVERSE_ENGINEERING,
            self::REF_TYPE_SEASON_CHALLENGE_REWARD,
            self::REF_TYPE_SECURITY_PROCESSING_FEE,
            self::REF_TYPE_SHARES,
            self::REF_TYPE_SKILL_PURCHASE,
            self::REF_TYPE_SOVEREIGNITY_BILL,
            self::REF_TYPE_STORE_PURCHASE,
            self::REF_TYPE_STORE_PURCHASE_REFUND,
            self::REF_TYPE_STRUCTURE_GATE_JUMP,
            self::REF_TYPE_TRANSACTION_TAX,
            self::REF_TYPE_UNDER_CONSTRUCTION,
            self::REF_TYPE_UPKEEP_ADJUSTMENT_FEE,
            self::REF_TYPE_WAR_ALLY_CONTRACT,
            self::REF_TYPE_WAR_FEE,
            self::REF_TYPE_WAR_FEE_SURRENDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('context_id', $data ?? [], null);
        $this->setIfExists('context_id_type', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('first_party_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('ref_type', $data ?? [], null);
        $this->setIfExists('second_party_id', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('tax_receiver_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContextIdTypeAllowableValues();
        if (!is_null($this->container['context_id_type']) && !in_array($this->container['context_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'context_id_type', must be one of '%s'",
                $this->container['context_id_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ref_type'] === null) {
            $invalidProperties[] = "'ref_type' can't be null";
        }
        $allowedValues = $this->getRefTypeAllowableValues();
        if (!is_null($this->container['ref_type']) && !in_array($this->container['ref_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ref_type', must be one of '%s'",
                $this->container['ref_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance Wallet balance after transaction occurred
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets context_id
     *
     * @return int|null
     */
    public function getContextId()
    {
        return $this->container['context_id'];
    }

    /**
     * Sets context_id
     *
     * @param int|null $context_id An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     *
     * @return self
     */
    public function setContextId($context_id)
    {
        if (is_null($context_id)) {
            throw new \InvalidArgumentException('non-nullable context_id cannot be null');
        }
        $this->container['context_id'] = $context_id;

        return $this;
    }

    /**
     * Gets context_id_type
     *
     * @return string|null
     */
    public function getContextIdType()
    {
        return $this->container['context_id_type'];
    }

    /**
     * Sets context_id_type
     *
     * @param string|null $context_id_type The type of the given context_id if present
     *
     * @return self
     */
    public function setContextIdType($context_id_type)
    {
        if (is_null($context_id_type)) {
            throw new \InvalidArgumentException('non-nullable context_id_type cannot be null');
        }
        /*$allowedValues = $this->getContextIdTypeAllowableValues();
        if (!in_array($context_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'context_id_type', must be one of '%s'",
                    $context_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }*/
        $this->container['context_id_type'] = $context_id_type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date and time of transaction
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The reason for the transaction, mirrors what is seen in the client
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets first_party_id
     *
     * @return int|null
     */
    public function getFirstPartyId()
    {
        return $this->container['first_party_id'];
    }

    /**
     * Sets first_party_id
     *
     * @param int|null $first_party_id The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     *
     * @return self
     */
    public function setFirstPartyId($first_party_id)
    {
        if (is_null($first_party_id)) {
            throw new \InvalidArgumentException('non-nullable first_party_id cannot be null');
        }
        $this->container['first_party_id'] = $first_party_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique journal reference ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason The user stated reason for the transaction. Only applies to some ref_types
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string $ref_type \"The transaction type for the given. transaction. Different transaction types will populate different attributes.\"
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        if (is_null($ref_type)) {
            throw new \InvalidArgumentException('non-nullable ref_type cannot be null');
        }
        /*$allowedValues = $this->getRefTypeAllowableValues();
        if (!in_array($ref_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ref_type', must be one of '%s'",
                    $ref_type,
                    implode("', '", $allowedValues)
                )
            );
        }*/
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets second_party_id
     *
     * @return int|null
     */
    public function getSecondPartyId()
    {
        return $this->container['second_party_id'];
    }

    /**
     * Sets second_party_id
     *
     * @param int|null $second_party_id The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     *
     * @return self
     */
    public function setSecondPartyId($second_party_id)
    {
        if (is_null($second_party_id)) {
            throw new \InvalidArgumentException('non-nullable second_party_id cannot be null');
        }
        $this->container['second_party_id'] = $second_party_id;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax Tax amount received. Only applies to tax related transactions
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_receiver_id
     *
     * @return int|null
     */
    public function getTaxReceiverId()
    {
        return $this->container['tax_receiver_id'];
    }

    /**
     * Sets tax_receiver_id
     *
     * @param int|null $tax_receiver_id The corporation ID receiving any tax paid. Only applies to tax related transactions
     *
     * @return self
     */
    public function setTaxReceiverId($tax_receiver_id)
    {
        if (is_null($tax_receiver_id)) {
            throw new \InvalidArgumentException('non-nullable tax_receiver_id cannot be null');
        }
        $this->container['tax_receiver_id'] = $tax_receiver_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


