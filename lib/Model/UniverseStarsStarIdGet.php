<?php
/**
 * UniverseStarsStarIdGet
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-09-30
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Model;

use \ArrayAccess;
use \Tkhamez\Eve\API\ObjectSerializer;

/**
 * UniverseStarsStarIdGet Class Doc Comment
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UniverseStarsStarIdGet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UniverseStarsStarIdGet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'age' => 'int',
        'luminosity' => 'float',
        'name' => 'string',
        'radius' => 'int',
        'solar_system_id' => 'int',
        'spectral_class' => 'string',
        'temperature' => 'int',
        'type_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'age' => 'int64',
        'luminosity' => 'double',
        'name' => null,
        'radius' => 'int64',
        'solar_system_id' => 'int64',
        'spectral_class' => null,
        'temperature' => 'int64',
        'type_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'age' => false,
        'luminosity' => false,
        'name' => false,
        'radius' => false,
        'solar_system_id' => false,
        'spectral_class' => false,
        'temperature' => false,
        'type_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'age' => 'age',
        'luminosity' => 'luminosity',
        'name' => 'name',
        'radius' => 'radius',
        'solar_system_id' => 'solar_system_id',
        'spectral_class' => 'spectral_class',
        'temperature' => 'temperature',
        'type_id' => 'type_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'age' => 'setAge',
        'luminosity' => 'setLuminosity',
        'name' => 'setName',
        'radius' => 'setRadius',
        'solar_system_id' => 'setSolarSystemId',
        'spectral_class' => 'setSpectralClass',
        'temperature' => 'setTemperature',
        'type_id' => 'setTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'age' => 'getAge',
        'luminosity' => 'getLuminosity',
        'name' => 'getName',
        'radius' => 'getRadius',
        'solar_system_id' => 'getSolarSystemId',
        'spectral_class' => 'getSpectralClass',
        'temperature' => 'getTemperature',
        'type_id' => 'getTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SPECTRAL_CLASS_K2_V = 'K2 V';
    public const SPECTRAL_CLASS_K4_V = 'K4 V';
    public const SPECTRAL_CLASS_G2_V = 'G2 V';
    public const SPECTRAL_CLASS_G8_V = 'G8 V';
    public const SPECTRAL_CLASS_M7_V = 'M7 V';
    public const SPECTRAL_CLASS_K7_V = 'K7 V';
    public const SPECTRAL_CLASS_M2_V = 'M2 V';
    public const SPECTRAL_CLASS_K5_V = 'K5 V';
    public const SPECTRAL_CLASS_M3_V = 'M3 V';
    public const SPECTRAL_CLASS_G0_V = 'G0 V';
    public const SPECTRAL_CLASS_G7_V = 'G7 V';
    public const SPECTRAL_CLASS_G3_V = 'G3 V';
    public const SPECTRAL_CLASS_F9_V = 'F9 V';
    public const SPECTRAL_CLASS_G5_V = 'G5 V';
    public const SPECTRAL_CLASS_F6_V = 'F6 V';
    public const SPECTRAL_CLASS_K8_V = 'K8 V';
    public const SPECTRAL_CLASS_K9_V = 'K9 V';
    public const SPECTRAL_CLASS_K6_V = 'K6 V';
    public const SPECTRAL_CLASS_G9_V = 'G9 V';
    public const SPECTRAL_CLASS_G6_V = 'G6 V';
    public const SPECTRAL_CLASS_G4_VI = 'G4 VI';
    public const SPECTRAL_CLASS_G4_V = 'G4 V';
    public const SPECTRAL_CLASS_F8_V = 'F8 V';
    public const SPECTRAL_CLASS_F2_V = 'F2 V';
    public const SPECTRAL_CLASS_F1_V = 'F1 V';
    public const SPECTRAL_CLASS_K3_V = 'K3 V';
    public const SPECTRAL_CLASS_F0_VI = 'F0 VI';
    public const SPECTRAL_CLASS_G1_VI = 'G1 VI';
    public const SPECTRAL_CLASS_G0_VI = 'G0 VI';
    public const SPECTRAL_CLASS_K1_V = 'K1 V';
    public const SPECTRAL_CLASS_M4_V = 'M4 V';
    public const SPECTRAL_CLASS_M1_V = 'M1 V';
    public const SPECTRAL_CLASS_M6_V = 'M6 V';
    public const SPECTRAL_CLASS_M0_V = 'M0 V';
    public const SPECTRAL_CLASS_K2_IV = 'K2 IV';
    public const SPECTRAL_CLASS_G2_VI = 'G2 VI';
    public const SPECTRAL_CLASS_K0_V = 'K0 V';
    public const SPECTRAL_CLASS_K5_IV = 'K5 IV';
    public const SPECTRAL_CLASS_F5_VI = 'F5 VI';
    public const SPECTRAL_CLASS_G6_VI = 'G6 VI';
    public const SPECTRAL_CLASS_F6_VI = 'F6 VI';
    public const SPECTRAL_CLASS_F2_IV = 'F2 IV';
    public const SPECTRAL_CLASS_G3_VI = 'G3 VI';
    public const SPECTRAL_CLASS_M8_V = 'M8 V';
    public const SPECTRAL_CLASS_F1_VI = 'F1 VI';
    public const SPECTRAL_CLASS_K1_IV = 'K1 IV';
    public const SPECTRAL_CLASS_F7_V = 'F7 V';
    public const SPECTRAL_CLASS_G5_VI = 'G5 VI';
    public const SPECTRAL_CLASS_M5_V = 'M5 V';
    public const SPECTRAL_CLASS_G7_VI = 'G7 VI';
    public const SPECTRAL_CLASS_F5_V = 'F5 V';
    public const SPECTRAL_CLASS_F4_VI = 'F4 VI';
    public const SPECTRAL_CLASS_F8_VI = 'F8 VI';
    public const SPECTRAL_CLASS_K3_IV = 'K3 IV';
    public const SPECTRAL_CLASS_F4_IV = 'F4 IV';
    public const SPECTRAL_CLASS_F0_V = 'F0 V';
    public const SPECTRAL_CLASS_G7_IV = 'G7 IV';
    public const SPECTRAL_CLASS_G8_VI = 'G8 VI';
    public const SPECTRAL_CLASS_F2_VI = 'F2 VI';
    public const SPECTRAL_CLASS_F4_V = 'F4 V';
    public const SPECTRAL_CLASS_F7_VI = 'F7 VI';
    public const SPECTRAL_CLASS_F3_V = 'F3 V';
    public const SPECTRAL_CLASS_G1_V = 'G1 V';
    public const SPECTRAL_CLASS_G9_VI = 'G9 VI';
    public const SPECTRAL_CLASS_F3_IV = 'F3 IV';
    public const SPECTRAL_CLASS_F9_VI = 'F9 VI';
    public const SPECTRAL_CLASS_M9_V = 'M9 V';
    public const SPECTRAL_CLASS_K0_IV = 'K0 IV';
    public const SPECTRAL_CLASS_F1_IV = 'F1 IV';
    public const SPECTRAL_CLASS_G4_IV = 'G4 IV';
    public const SPECTRAL_CLASS_F3_VI = 'F3 VI';
    public const SPECTRAL_CLASS_K4_IV = 'K4 IV';
    public const SPECTRAL_CLASS_G5_IV = 'G5 IV';
    public const SPECTRAL_CLASS_G3_IV = 'G3 IV';
    public const SPECTRAL_CLASS_G1_IV = 'G1 IV';
    public const SPECTRAL_CLASS_K7_IV = 'K7 IV';
    public const SPECTRAL_CLASS_G0_IV = 'G0 IV';
    public const SPECTRAL_CLASS_K6_IV = 'K6 IV';
    public const SPECTRAL_CLASS_K9_IV = 'K9 IV';
    public const SPECTRAL_CLASS_G2_IV = 'G2 IV';
    public const SPECTRAL_CLASS_F9_IV = 'F9 IV';
    public const SPECTRAL_CLASS_F0_IV = 'F0 IV';
    public const SPECTRAL_CLASS_K8_IV = 'K8 IV';
    public const SPECTRAL_CLASS_G8_IV = 'G8 IV';
    public const SPECTRAL_CLASS_F6_IV = 'F6 IV';
    public const SPECTRAL_CLASS_F5_IV = 'F5 IV';
    public const SPECTRAL_CLASS_A0 = 'A0';
    public const SPECTRAL_CLASS_A0_IV = 'A0IV';
    public const SPECTRAL_CLASS_A0_IV2 = 'A0IV2';
    public const SPECTRAL_CLASS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpectralClassAllowableValues()
    {
        return [
            self::SPECTRAL_CLASS_K2_V,
            self::SPECTRAL_CLASS_K4_V,
            self::SPECTRAL_CLASS_G2_V,
            self::SPECTRAL_CLASS_G8_V,
            self::SPECTRAL_CLASS_M7_V,
            self::SPECTRAL_CLASS_K7_V,
            self::SPECTRAL_CLASS_M2_V,
            self::SPECTRAL_CLASS_K5_V,
            self::SPECTRAL_CLASS_M3_V,
            self::SPECTRAL_CLASS_G0_V,
            self::SPECTRAL_CLASS_G7_V,
            self::SPECTRAL_CLASS_G3_V,
            self::SPECTRAL_CLASS_F9_V,
            self::SPECTRAL_CLASS_G5_V,
            self::SPECTRAL_CLASS_F6_V,
            self::SPECTRAL_CLASS_K8_V,
            self::SPECTRAL_CLASS_K9_V,
            self::SPECTRAL_CLASS_K6_V,
            self::SPECTRAL_CLASS_G9_V,
            self::SPECTRAL_CLASS_G6_V,
            self::SPECTRAL_CLASS_G4_VI,
            self::SPECTRAL_CLASS_G4_V,
            self::SPECTRAL_CLASS_F8_V,
            self::SPECTRAL_CLASS_F2_V,
            self::SPECTRAL_CLASS_F1_V,
            self::SPECTRAL_CLASS_K3_V,
            self::SPECTRAL_CLASS_F0_VI,
            self::SPECTRAL_CLASS_G1_VI,
            self::SPECTRAL_CLASS_G0_VI,
            self::SPECTRAL_CLASS_K1_V,
            self::SPECTRAL_CLASS_M4_V,
            self::SPECTRAL_CLASS_M1_V,
            self::SPECTRAL_CLASS_M6_V,
            self::SPECTRAL_CLASS_M0_V,
            self::SPECTRAL_CLASS_K2_IV,
            self::SPECTRAL_CLASS_G2_VI,
            self::SPECTRAL_CLASS_K0_V,
            self::SPECTRAL_CLASS_K5_IV,
            self::SPECTRAL_CLASS_F5_VI,
            self::SPECTRAL_CLASS_G6_VI,
            self::SPECTRAL_CLASS_F6_VI,
            self::SPECTRAL_CLASS_F2_IV,
            self::SPECTRAL_CLASS_G3_VI,
            self::SPECTRAL_CLASS_M8_V,
            self::SPECTRAL_CLASS_F1_VI,
            self::SPECTRAL_CLASS_K1_IV,
            self::SPECTRAL_CLASS_F7_V,
            self::SPECTRAL_CLASS_G5_VI,
            self::SPECTRAL_CLASS_M5_V,
            self::SPECTRAL_CLASS_G7_VI,
            self::SPECTRAL_CLASS_F5_V,
            self::SPECTRAL_CLASS_F4_VI,
            self::SPECTRAL_CLASS_F8_VI,
            self::SPECTRAL_CLASS_K3_IV,
            self::SPECTRAL_CLASS_F4_IV,
            self::SPECTRAL_CLASS_F0_V,
            self::SPECTRAL_CLASS_G7_IV,
            self::SPECTRAL_CLASS_G8_VI,
            self::SPECTRAL_CLASS_F2_VI,
            self::SPECTRAL_CLASS_F4_V,
            self::SPECTRAL_CLASS_F7_VI,
            self::SPECTRAL_CLASS_F3_V,
            self::SPECTRAL_CLASS_G1_V,
            self::SPECTRAL_CLASS_G9_VI,
            self::SPECTRAL_CLASS_F3_IV,
            self::SPECTRAL_CLASS_F9_VI,
            self::SPECTRAL_CLASS_M9_V,
            self::SPECTRAL_CLASS_K0_IV,
            self::SPECTRAL_CLASS_F1_IV,
            self::SPECTRAL_CLASS_G4_IV,
            self::SPECTRAL_CLASS_F3_VI,
            self::SPECTRAL_CLASS_K4_IV,
            self::SPECTRAL_CLASS_G5_IV,
            self::SPECTRAL_CLASS_G3_IV,
            self::SPECTRAL_CLASS_G1_IV,
            self::SPECTRAL_CLASS_K7_IV,
            self::SPECTRAL_CLASS_G0_IV,
            self::SPECTRAL_CLASS_K6_IV,
            self::SPECTRAL_CLASS_K9_IV,
            self::SPECTRAL_CLASS_G2_IV,
            self::SPECTRAL_CLASS_F9_IV,
            self::SPECTRAL_CLASS_F0_IV,
            self::SPECTRAL_CLASS_K8_IV,
            self::SPECTRAL_CLASS_G8_IV,
            self::SPECTRAL_CLASS_F6_IV,
            self::SPECTRAL_CLASS_F5_IV,
            self::SPECTRAL_CLASS_A0,
            self::SPECTRAL_CLASS_A0_IV,
            self::SPECTRAL_CLASS_A0_IV2,
            self::SPECTRAL_CLASS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('age', $data ?? [], null);
        $this->setIfExists('luminosity', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('radius', $data ?? [], null);
        $this->setIfExists('solar_system_id', $data ?? [], null);
        $this->setIfExists('spectral_class', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['age'] === null) {
            $invalidProperties[] = "'age' can't be null";
        }
        if ($this->container['luminosity'] === null) {
            $invalidProperties[] = "'luminosity' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['radius'] === null) {
            $invalidProperties[] = "'radius' can't be null";
        }
        if ($this->container['solar_system_id'] === null) {
            $invalidProperties[] = "'solar_system_id' can't be null";
        }
        if ($this->container['spectral_class'] === null) {
            $invalidProperties[] = "'spectral_class' can't be null";
        }
        $allowedValues = $this->getSpectralClassAllowableValues();
        if (!is_null($this->container['spectral_class']) && !in_array($this->container['spectral_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spectral_class', must be one of '%s'",
                $this->container['spectral_class'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['temperature'] === null) {
            $invalidProperties[] = "'temperature' can't be null";
        }
        if ($this->container['type_id'] === null) {
            $invalidProperties[] = "'type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age Age of star in years
     *
     * @return self
     */
    public function setAge($age)
    {
        if (is_null($age)) {
            throw new \InvalidArgumentException('non-nullable age cannot be null');
        }
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets luminosity
     *
     * @return float
     */
    public function getLuminosity()
    {
        return $this->container['luminosity'];
    }

    /**
     * Sets luminosity
     *
     * @param float $luminosity luminosity
     *
     * @return self
     */
    public function setLuminosity($luminosity)
    {
        if (is_null($luminosity)) {
            throw new \InvalidArgumentException('non-nullable luminosity cannot be null');
        }
        $this->container['luminosity'] = $luminosity;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return int
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param int $radius radius
     *
     * @return self
     */
    public function setRadius($radius)
    {
        if (is_null($radius)) {
            throw new \InvalidArgumentException('non-nullable radius cannot be null');
        }
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets solar_system_id
     *
     * @return int
     */
    public function getSolarSystemId()
    {
        return $this->container['solar_system_id'];
    }

    /**
     * Sets solar_system_id
     *
     * @param int $solar_system_id solar_system_id
     *
     * @return self
     */
    public function setSolarSystemId($solar_system_id)
    {
        if (is_null($solar_system_id)) {
            throw new \InvalidArgumentException('non-nullable solar_system_id cannot be null');
        }
        $this->container['solar_system_id'] = $solar_system_id;

        return $this;
    }

    /**
     * Gets spectral_class
     *
     * @return string
     */
    public function getSpectralClass()
    {
        return $this->container['spectral_class'];
    }

    /**
     * Sets spectral_class
     *
     * @param string $spectral_class spectral_class
     *
     * @return self
     */
    public function setSpectralClass($spectral_class)
    {
        if (is_null($spectral_class)) {
            throw new \InvalidArgumentException('non-nullable spectral_class cannot be null');
        }
        $allowedValues = $this->getSpectralClassAllowableValues();
        if (!in_array($spectral_class, $allowedValues, true)) {
            $spectral_class = self::SPECTRAL_CLASS_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['spectral_class'] = $spectral_class;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return int
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param int $temperature temperature
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


