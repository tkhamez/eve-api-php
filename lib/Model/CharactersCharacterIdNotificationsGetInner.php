<?php
/**
 * CharactersCharacterIdNotificationsGetInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Stellar Information (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2020-01-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tkhamez\Eve\API\Model;

use \ArrayAccess;
use \Tkhamez\Eve\API\ObjectSerializer;

/**
 * CharactersCharacterIdNotificationsGetInner Class Doc Comment
 *
 * @category Class
 * @package  Tkhamez\Eve\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CharactersCharacterIdNotificationsGetInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CharactersCharacterIdNotificationsGet_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_read' => 'bool',
        'notification_id' => 'int',
        'sender_id' => 'int',
        'sender_type' => 'string',
        'text' => 'string',
        'timestamp' => '\DateTime',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_read' => null,
        'notification_id' => 'int64',
        'sender_id' => 'int64',
        'sender_type' => null,
        'text' => null,
        'timestamp' => 'date-time',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_read' => false,
        'notification_id' => false,
        'sender_id' => false,
        'sender_type' => false,
        'text' => false,
        'timestamp' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_read' => 'is_read',
        'notification_id' => 'notification_id',
        'sender_id' => 'sender_id',
        'sender_type' => 'sender_type',
        'text' => 'text',
        'timestamp' => 'timestamp',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_read' => 'setIsRead',
        'notification_id' => 'setNotificationId',
        'sender_id' => 'setSenderId',
        'sender_type' => 'setSenderType',
        'text' => 'setText',
        'timestamp' => 'setTimestamp',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_read' => 'getIsRead',
        'notification_id' => 'getNotificationId',
        'sender_id' => 'getSenderId',
        'sender_type' => 'getSenderType',
        'text' => 'getText',
        'timestamp' => 'getTimestamp',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SENDER_TYPE_CHARACTER = 'character';
    public const SENDER_TYPE_CORPORATION = 'corporation';
    public const SENDER_TYPE_ALLIANCE = 'alliance';
    public const SENDER_TYPE_FACTION = 'faction';
    public const SENDER_TYPE_OTHER = 'other';
    public const SENDER_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_ACCEPTED_ALLY = 'AcceptedAlly';
    public const TYPE_ACCEPTED_SURRENDER = 'AcceptedSurrender';
    public const TYPE_AGENT_RETIRED_TRIGRAVIAN = 'AgentRetiredTrigravian';
    public const TYPE_ALL_ANCHORING_MSG = 'AllAnchoringMsg';
    public const TYPE_ALL_MAINTENANCE_BILL_MSG = 'AllMaintenanceBillMsg';
    public const TYPE_ALL_STRUC_INVULNERABLE_MSG = 'AllStrucInvulnerableMsg';
    public const TYPE_ALL_STRUCT_VULNERABLE_MSG = 'AllStructVulnerableMsg';
    public const TYPE_ALL_WAR_CORP_JOINED_ALLIANCE_MSG = 'AllWarCorpJoinedAllianceMsg';
    public const TYPE_ALL_WAR_DECLARED_MSG = 'AllWarDeclaredMsg';
    public const TYPE_ALL_WAR_INVALIDATED_MSG = 'AllWarInvalidatedMsg';
    public const TYPE_ALL_WAR_RETRACTED_MSG = 'AllWarRetractedMsg';
    public const TYPE_ALL_WAR_SURRENDER_MSG = 'AllWarSurrenderMsg';
    public const TYPE_ALLIANCE_CAPITAL_CHANGED = 'AllianceCapitalChanged';
    public const TYPE_ALLIANCE_WAR_DECLARED_V2 = 'AllianceWarDeclaredV2';
    public const TYPE_ALLY_CONTRACT_CANCELLED = 'AllyContractCancelled';
    public const TYPE_ALLY_JOINED_WAR_AGGRESSOR_MSG = 'AllyJoinedWarAggressorMsg';
    public const TYPE_ALLY_JOINED_WAR_ALLY_MSG = 'AllyJoinedWarAllyMsg';
    public const TYPE_ALLY_JOINED_WAR_DEFENDER_MSG = 'AllyJoinedWarDefenderMsg';
    public const TYPE_BATTLE_PUNISH_FRIENDLY_FIRE = 'BattlePunishFriendlyFire';
    public const TYPE_BILL_OUT_OF_MONEY_MSG = 'BillOutOfMoneyMsg';
    public const TYPE_BILL_PAID_CORP_ALL_MSG = 'BillPaidCorpAllMsg';
    public const TYPE_BOUNTY_CLAIM_MSG = 'BountyClaimMsg';
    public const TYPE_BOUNTY_ESS_SHARED = 'BountyESSShared';
    public const TYPE_BOUNTY_ESS_TAKEN = 'BountyESSTaken';
    public const TYPE_BOUNTY_PLACED_ALLIANCE = 'BountyPlacedAlliance';
    public const TYPE_BOUNTY_PLACED_CHAR = 'BountyPlacedChar';
    public const TYPE_BOUNTY_PLACED_CORP = 'BountyPlacedCorp';
    public const TYPE_BOUNTY_YOUR_BOUNTY_CLAIMED = 'BountyYourBountyClaimed';
    public const TYPE_BUDDY_CONNECT_CONTACT_ADD = 'BuddyConnectContactAdd';
    public const TYPE_CHAR_APP_ACCEPT_MSG = 'CharAppAcceptMsg';
    public const TYPE_CHAR_APP_REJECT_MSG = 'CharAppRejectMsg';
    public const TYPE_CHAR_APP_WITHDRAW_MSG = 'CharAppWithdrawMsg';
    public const TYPE_CHAR_LEFT_CORP_MSG = 'CharLeftCorpMsg';
    public const TYPE_CHAR_MEDAL_MSG = 'CharMedalMsg';
    public const TYPE_CHAR_TERMINATION_MSG = 'CharTerminationMsg';
    public const TYPE_CLONE_ACTIVATION_MSG = 'CloneActivationMsg';
    public const TYPE_CLONE_ACTIVATION_MSG2 = 'CloneActivationMsg2';
    public const TYPE_CLONE_MOVED_MSG = 'CloneMovedMsg';
    public const TYPE_CLONE_REVOKED_MSG1 = 'CloneRevokedMsg1';
    public const TYPE_CLONE_REVOKED_MSG2 = 'CloneRevokedMsg2';
    public const TYPE_COMBAT_OPERATION_FINISHED = 'CombatOperationFinished';
    public const TYPE_CONTACT_ADD = 'ContactAdd';
    public const TYPE_CONTACT_EDIT = 'ContactEdit';
    public const TYPE_CONTAINER_PASSWORD_MSG = 'ContainerPasswordMsg';
    public const TYPE_CONTRACT_REGION_CHANGED_TO_POCHVEN = 'ContractRegionChangedToPochven';
    public const TYPE_CORP_ALL_BILL_MSG = 'CorpAllBillMsg';
    public const TYPE_CORP_APP_ACCEPT_MSG = 'CorpAppAcceptMsg';
    public const TYPE_CORP_APP_INVITED_MSG = 'CorpAppInvitedMsg';
    public const TYPE_CORP_APP_NEW_MSG = 'CorpAppNewMsg';
    public const TYPE_CORP_APP_REJECT_CUSTOM_MSG = 'CorpAppRejectCustomMsg';
    public const TYPE_CORP_APP_REJECT_MSG = 'CorpAppRejectMsg';
    public const TYPE_CORP_BECAME_WAR_ELIGIBLE = 'CorpBecameWarEligible';
    public const TYPE_CORP_DIVIDEND_MSG = 'CorpDividendMsg';
    public const TYPE_CORP_FRIENDLY_FIRE_DISABLE_TIMER_COMPLETED = 'CorpFriendlyFireDisableTimerCompleted';
    public const TYPE_CORP_FRIENDLY_FIRE_DISABLE_TIMER_STARTED = 'CorpFriendlyFireDisableTimerStarted';
    public const TYPE_CORP_FRIENDLY_FIRE_ENABLE_TIMER_COMPLETED = 'CorpFriendlyFireEnableTimerCompleted';
    public const TYPE_CORP_FRIENDLY_FIRE_ENABLE_TIMER_STARTED = 'CorpFriendlyFireEnableTimerStarted';
    public const TYPE_CORP_KICKED = 'CorpKicked';
    public const TYPE_CORP_LIQUIDATION_MSG = 'CorpLiquidationMsg';
    public const TYPE_CORP_NEW_CEO_MSG = 'CorpNewCEOMsg';
    public const TYPE_CORP_NEWS_MSG = 'CorpNewsMsg';
    public const TYPE_CORP_NO_LONGER_WAR_ELIGIBLE = 'CorpNoLongerWarEligible';
    public const TYPE_CORP_OFFICE_EXPIRATION_MSG = 'CorpOfficeExpirationMsg';
    public const TYPE_CORP_STRUCT_LOST_MSG = 'CorpStructLostMsg';
    public const TYPE_CORP_TAX_CHANGE_MSG = 'CorpTaxChangeMsg';
    public const TYPE_CORP_VOTE_CEO_REVOKED_MSG = 'CorpVoteCEORevokedMsg';
    public const TYPE_CORP_VOTE_MSG = 'CorpVoteMsg';
    public const TYPE_CORP_WAR_DECLARED_MSG = 'CorpWarDeclaredMsg';
    public const TYPE_CORP_WAR_DECLARED_V2 = 'CorpWarDeclaredV2';
    public const TYPE_CORP_WAR_FIGHTING_LEGAL_MSG = 'CorpWarFightingLegalMsg';
    public const TYPE_CORP_WAR_INVALIDATED_MSG = 'CorpWarInvalidatedMsg';
    public const TYPE_CORP_WAR_RETRACTED_MSG = 'CorpWarRetractedMsg';
    public const TYPE_CORP_WAR_SURRENDER_MSG = 'CorpWarSurrenderMsg';
    public const TYPE_CORPORATION_GOAL_CLOSED = 'CorporationGoalClosed';
    public const TYPE_CORPORATION_GOAL_COMPLETED = 'CorporationGoalCompleted';
    public const TYPE_CORPORATION_GOAL_CREATED = 'CorporationGoalCreated';
    public const TYPE_CORPORATION_GOAL_EXPIRED = 'CorporationGoalExpired';
    public const TYPE_CORPORATION_GOAL_LIMIT_REACHED = 'CorporationGoalLimitReached';
    public const TYPE_CORPORATION_GOAL_NAME_CHANGE = 'CorporationGoalNameChange';
    public const TYPE_CORPORATION_LEFT = 'CorporationLeft';
    public const TYPE_CUSTOMS_MSG = 'CustomsMsg';
    public const TYPE_DAILY_ITEM_REWARD_AUTO_CLAIMED = 'DailyItemRewardAutoClaimed';
    public const TYPE_DECLARE_WAR = 'DeclareWar';
    public const TYPE_DISTRICT_ATTACKED = 'DistrictAttacked';
    public const TYPE_DUST_APP_ACCEPTED_MSG = 'DustAppAcceptedMsg';
    public const TYPE_ESS_MAIN_BANK_LINK = 'ESSMainBankLink';
    public const TYPE_ENTOSIS_CAPTURE_STARTED = 'EntosisCaptureStarted';
    public const TYPE_EXPERT_SYSTEM_EXPIRED = 'ExpertSystemExpired';
    public const TYPE_EXPERT_SYSTEM_EXPIRY_IMMINENT = 'ExpertSystemExpiryImminent';
    public const TYPE_FW_ALLIANCE_KICK_MSG = 'FWAllianceKickMsg';
    public const TYPE_FW_ALLIANCE_WARNING_MSG = 'FWAllianceWarningMsg';
    public const TYPE_FW_CHAR_KICK_MSG = 'FWCharKickMsg';
    public const TYPE_FW_CHAR_RANK_GAIN_MSG = 'FWCharRankGainMsg';
    public const TYPE_FW_CHAR_RANK_LOSS_MSG = 'FWCharRankLossMsg';
    public const TYPE_FW_CHAR_WARNING_MSG = 'FWCharWarningMsg';
    public const TYPE_FW_CORP_JOIN_MSG = 'FWCorpJoinMsg';
    public const TYPE_FW_CORP_KICK_MSG = 'FWCorpKickMsg';
    public const TYPE_FW_CORP_LEAVE_MSG = 'FWCorpLeaveMsg';
    public const TYPE_FW_CORP_WARNING_MSG = 'FWCorpWarningMsg';
    public const TYPE_FAC_WAR_CORP_JOIN_REQUEST_MSG = 'FacWarCorpJoinRequestMsg';
    public const TYPE_FAC_WAR_CORP_JOIN_WITHDRAW_MSG = 'FacWarCorpJoinWithdrawMsg';
    public const TYPE_FAC_WAR_CORP_LEAVE_REQUEST_MSG = 'FacWarCorpLeaveRequestMsg';
    public const TYPE_FAC_WAR_CORP_LEAVE_WITHDRAW_MSG = 'FacWarCorpLeaveWithdrawMsg';
    public const TYPE_FAC_WAR_LP_DISQUALIFIED_EVENT = 'FacWarLPDisqualifiedEvent';
    public const TYPE_FAC_WAR_LP_DISQUALIFIED_KILL = 'FacWarLPDisqualifiedKill';
    public const TYPE_FAC_WAR_LP_PAYOUT_EVENT = 'FacWarLPPayoutEvent';
    public const TYPE_FAC_WAR_LP_PAYOUT_KILL = 'FacWarLPPayoutKill';
    public const TYPE_FREELANCE_PROJECT_CLOSED = 'FreelanceProjectClosed';
    public const TYPE_FREELANCE_PROJECT_COMPLETED = 'FreelanceProjectCompleted';
    public const TYPE_FREELANCE_PROJECT_CREATED = 'FreelanceProjectCreated';
    public const TYPE_FREELANCE_PROJECT_EXPIRED = 'FreelanceProjectExpired';
    public const TYPE_FREELANCE_PROJECT_LIMIT_REACHED = 'FreelanceProjectLimitReached';
    public const TYPE_FREELANCE_PROJECT_PARTICIPANT_KICKED = 'FreelanceProjectParticipantKicked';
    public const TYPE_GAME_TIME_ADDED = 'GameTimeAdded';
    public const TYPE_GAME_TIME_RECEIVED = 'GameTimeReceived';
    public const TYPE_GAME_TIME_SENT = 'GameTimeSent';
    public const TYPE_GIFT_RECEIVED = 'GiftReceived';
    public const TYPE_I_HUB_DESTROYED_BY_BILL_FAILURE = 'IHubDestroyedByBillFailure';
    public const TYPE_INCURSION_COMPLETED_MSG = 'IncursionCompletedMsg';
    public const TYPE_INDUSTRY_OPERATION_FINISHED = 'IndustryOperationFinished';
    public const TYPE_INDUSTRY_TEAM_AUCTION_LOST = 'IndustryTeamAuctionLost';
    public const TYPE_INDUSTRY_TEAM_AUCTION_WON = 'IndustryTeamAuctionWon';
    public const TYPE_INFRASTRUCTURE_HUB_BILL_ABOUT_TO_EXPIRE = 'InfrastructureHubBillAboutToExpire';
    public const TYPE_INSURANCE_EXPIRATION_MSG = 'InsuranceExpirationMsg';
    public const TYPE_INSURANCE_FIRST_SHIP_MSG = 'InsuranceFirstShipMsg';
    public const TYPE_INSURANCE_INVALIDATED_MSG = 'InsuranceInvalidatedMsg';
    public const TYPE_INSURANCE_ISSUED_MSG = 'InsuranceIssuedMsg';
    public const TYPE_INSURANCE_PAYOUT_MSG = 'InsurancePayoutMsg';
    public const TYPE_INVASION_COMPLETED_MSG = 'InvasionCompletedMsg';
    public const TYPE_INVASION_SYSTEM_LOGIN = 'InvasionSystemLogin';
    public const TYPE_INVASION_SYSTEM_START = 'InvasionSystemStart';
    public const TYPE_JUMP_CLONE_DELETED_MSG1 = 'JumpCloneDeletedMsg1';
    public const TYPE_JUMP_CLONE_DELETED_MSG2 = 'JumpCloneDeletedMsg2';
    public const TYPE_KILL_REPORT_FINAL_BLOW = 'KillReportFinalBlow';
    public const TYPE_KILL_REPORT_VICTIM = 'KillReportVictim';
    public const TYPE_KILL_RIGHT_AVAILABLE = 'KillRightAvailable';
    public const TYPE_KILL_RIGHT_AVAILABLE_OPEN = 'KillRightAvailableOpen';
    public const TYPE_KILL_RIGHT_EARNED = 'KillRightEarned';
    public const TYPE_KILL_RIGHT_UNAVAILABLE = 'KillRightUnavailable';
    public const TYPE_KILL_RIGHT_UNAVAILABLE_OPEN = 'KillRightUnavailableOpen';
    public const TYPE_KILL_RIGHT_USED = 'KillRightUsed';
    public const TYPE_LP_AUTO_REDEEMED = 'LPAutoRedeemed';
    public const TYPE_LOCATE_CHAR_MSG = 'LocateCharMsg';
    public const TYPE_MADE_WAR_MUTUAL = 'MadeWarMutual';
    public const TYPE_MERC_OFFER_RETRACTED_MSG = 'MercOfferRetractedMsg';
    public const TYPE_MERC_OFFERED_NEGOTIATION_MSG = 'MercOfferedNegotiationMsg';
    public const TYPE_MERCENARY_DEN_ATTACKED = 'MercenaryDenAttacked';
    public const TYPE_MERCENARY_DEN_NEW_MTO = 'MercenaryDenNewMTO';
    public const TYPE_MERCENARY_DEN_REINFORCED = 'MercenaryDenReinforced';
    public const TYPE_MISSION_CANCELED_TRIGLAVIAN = 'MissionCanceledTriglavian';
    public const TYPE_MISSION_OFFER_EXPIRATION_MSG = 'MissionOfferExpirationMsg';
    public const TYPE_MISSION_TIMEOUT_MSG = 'MissionTimeoutMsg';
    public const TYPE_MOONMINING_AUTOMATIC_FRACTURE = 'MoonminingAutomaticFracture';
    public const TYPE_MOONMINING_EXTRACTION_CANCELLED = 'MoonminingExtractionCancelled';
    public const TYPE_MOONMINING_EXTRACTION_FINISHED = 'MoonminingExtractionFinished';
    public const TYPE_MOONMINING_EXTRACTION_STARTED = 'MoonminingExtractionStarted';
    public const TYPE_MOONMINING_LASER_FIRED = 'MoonminingLaserFired';
    public const TYPE_MUTUAL_WAR_EXPIRED = 'MutualWarExpired';
    public const TYPE_MUTUAL_WAR_INVITE_ACCEPTED = 'MutualWarInviteAccepted';
    public const TYPE_MUTUAL_WAR_INVITE_REJECTED = 'MutualWarInviteRejected';
    public const TYPE_MUTUAL_WAR_INVITE_SENT = 'MutualWarInviteSent';
    public const TYPE_NPC_STANDINGS_GAINED = 'NPCStandingsGained';
    public const TYPE_NPC_STANDINGS_LOST = 'NPCStandingsLost';
    public const TYPE_OFFER_TO_ALLY_RETRACTED = 'OfferToAllyRetracted';
    public const TYPE_OFFERED_SURRENDER = 'OfferedSurrender';
    public const TYPE_OFFERED_TO_ALLY = 'OfferedToAlly';
    public const TYPE_OFFICE_LEASE_CANCELED_INSUFFICIENT_STANDINGS = 'OfficeLeaseCanceledInsufficientStandings';
    public const TYPE_OLD_LSC_MESSAGES = 'OldLscMessages';
    public const TYPE_OPERATION_FINISHED = 'OperationFinished';
    public const TYPE_ORBITAL_ATTACKED = 'OrbitalAttacked';
    public const TYPE_ORBITAL_REINFORCED = 'OrbitalReinforced';
    public const TYPE_OWNERSHIP_TRANSFERRED = 'OwnershipTransferred';
    public const TYPE_RAFFLE_CREATED = 'RaffleCreated';
    public const TYPE_RAFFLE_EXPIRED = 'RaffleExpired';
    public const TYPE_RAFFLE_FINISHED = 'RaffleFinished';
    public const TYPE_REIMBURSEMENT_MSG = 'ReimbursementMsg';
    public const TYPE_RESEARCH_MISSION_AVAILABLE_MSG = 'ResearchMissionAvailableMsg';
    public const TYPE_RETRACTS_WAR = 'RetractsWar';
    public const TYPE_SP_AUTO_REDEEMED = 'SPAutoRedeemed';
    public const TYPE_SEASONAL_CHALLENGE_COMPLETED = 'SeasonalChallengeCompleted';
    public const TYPE_SKIN_SEQUENCING_COMPLETED = 'SkinSequencingCompleted';
    public const TYPE_SKYHOOK_DEPLOYED = 'SkyhookDeployed';
    public const TYPE_SKYHOOK_DESTROYED = 'SkyhookDestroyed';
    public const TYPE_SKYHOOK_LOST_SHIELDS = 'SkyhookLostShields';
    public const TYPE_SKYHOOK_ONLINE = 'SkyhookOnline';
    public const TYPE_SKYHOOK_UNDER_ATTACK = 'SkyhookUnderAttack';
    public const TYPE_SOV_ALL_CLAIM_AQUIRED_MSG = 'SovAllClaimAquiredMsg';
    public const TYPE_SOV_ALL_CLAIM_LOST_MSG = 'SovAllClaimLostMsg';
    public const TYPE_SOV_COMMAND_NODE_EVENT_STARTED = 'SovCommandNodeEventStarted';
    public const TYPE_SOV_CORP_BILL_LATE_MSG = 'SovCorpBillLateMsg';
    public const TYPE_SOV_CORP_CLAIM_FAIL_MSG = 'SovCorpClaimFailMsg';
    public const TYPE_SOV_DISRUPTOR_MSG = 'SovDisruptorMsg';
    public const TYPE_SOV_STATION_ENTERED_FREEPORT = 'SovStationEnteredFreeport';
    public const TYPE_SOV_STRUCTURE_DESTROYED = 'SovStructureDestroyed';
    public const TYPE_SOV_STRUCTURE_REINFORCED = 'SovStructureReinforced';
    public const TYPE_SOV_STRUCTURE_SELF_DESTRUCT_CANCEL = 'SovStructureSelfDestructCancel';
    public const TYPE_SOV_STRUCTURE_SELF_DESTRUCT_FINISHED = 'SovStructureSelfDestructFinished';
    public const TYPE_SOV_STRUCTURE_SELF_DESTRUCT_REQUESTED = 'SovStructureSelfDestructRequested';
    public const TYPE_SOVEREIGNTY_IH_DAMAGE_MSG = 'SovereigntyIHDamageMsg';
    public const TYPE_SOVEREIGNTY_SBU_DAMAGE_MSG = 'SovereigntySBUDamageMsg';
    public const TYPE_SOVEREIGNTY_TCU_DAMAGE_MSG = 'SovereigntyTCUDamageMsg';
    public const TYPE_STATION_AGGRESSION_MSG1 = 'StationAggressionMsg1';
    public const TYPE_STATION_AGGRESSION_MSG2 = 'StationAggressionMsg2';
    public const TYPE_STATION_CONQUER_MSG = 'StationConquerMsg';
    public const TYPE_STATION_SERVICE_DISABLED = 'StationServiceDisabled';
    public const TYPE_STATION_SERVICE_ENABLED = 'StationServiceEnabled';
    public const TYPE_STATION_STATE_CHANGE_MSG = 'StationStateChangeMsg';
    public const TYPE_STORY_LINE_MISSION_AVAILABLE_MSG = 'StoryLineMissionAvailableMsg';
    public const TYPE_STRUCTURE_ANCHORING = 'StructureAnchoring';
    public const TYPE_STRUCTURE_COURIER_CONTRACT_CHANGED = 'StructureCourierContractChanged';
    public const TYPE_STRUCTURE_DESTROYED = 'StructureDestroyed';
    public const TYPE_STRUCTURE_FUEL_ALERT = 'StructureFuelAlert';
    public const TYPE_STRUCTURE_IMPENDING_ABANDONMENT_ASSETS_AT_RISK = 'StructureImpendingAbandonmentAssetsAtRisk';
    public const TYPE_STRUCTURE_ITEMS_DELIVERED = 'StructureItemsDelivered';
    public const TYPE_STRUCTURE_ITEMS_MOVED_TO_SAFETY = 'StructureItemsMovedToSafety';
    public const TYPE_STRUCTURE_LOST_ARMOR = 'StructureLostArmor';
    public const TYPE_STRUCTURE_LOST_SHIELDS = 'StructureLostShields';
    public const TYPE_STRUCTURE_LOW_REAGENTS_ALERT = 'StructureLowReagentsAlert';
    public const TYPE_STRUCTURE_NO_REAGENTS_ALERT = 'StructureNoReagentsAlert';
    public const TYPE_STRUCTURE_ONLINE = 'StructureOnline';
    public const TYPE_STRUCTURE_PAINT_PURCHASED = 'StructurePaintPurchased';
    public const TYPE_STRUCTURE_SERVICES_OFFLINE = 'StructureServicesOffline';
    public const TYPE_STRUCTURE_UNANCHORING = 'StructureUnanchoring';
    public const TYPE_STRUCTURE_UNDER_ATTACK = 'StructureUnderAttack';
    public const TYPE_STRUCTURE_WENT_HIGH_POWER = 'StructureWentHighPower';
    public const TYPE_STRUCTURE_WENT_LOW_POWER = 'StructureWentLowPower';
    public const TYPE_STRUCTURES_JOBS_CANCELLED = 'StructuresJobsCancelled';
    public const TYPE_STRUCTURES_JOBS_PAUSED = 'StructuresJobsPaused';
    public const TYPE_STRUCTURES_REINFORCEMENT_CHANGED = 'StructuresReinforcementChanged';
    public const TYPE_TOWER_ALERT_MSG = 'TowerAlertMsg';
    public const TYPE_TOWER_RESOURCE_ALERT_MSG = 'TowerResourceAlertMsg';
    public const TYPE_TRANSACTION_REVERSAL_MSG = 'TransactionReversalMsg';
    public const TYPE_TUTORIAL_MSG = 'TutorialMsg';
    public const TYPE_WAR_ADOPTED = 'WarAdopted';
    public const TYPE_WAR_ALLY_INHERITED = 'WarAllyInherited';
    public const TYPE_WAR_ALLY_OFFER_DECLINED_MSG = 'WarAllyOfferDeclinedMsg';
    public const TYPE_WAR_CONCORD_INVALIDATES = 'WarConcordInvalidates';
    public const TYPE_WAR_DECLARED = 'WarDeclared';
    public const TYPE_WAR_ENDED_HQ_SECURITY_DROP = 'WarEndedHqSecurityDrop';
    public const TYPE_WAR_HQ_REMOVED_FROM_SPACE = 'WarHQRemovedFromSpace';
    public const TYPE_WAR_INHERITED = 'WarInherited';
    public const TYPE_WAR_INVALID = 'WarInvalid';
    public const TYPE_WAR_RETRACTED = 'WarRetracted';
    public const TYPE_WAR_RETRACTED_BY_CONCORD = 'WarRetractedByConcord';
    public const TYPE_WAR_SURRENDER_DECLINED_MSG = 'WarSurrenderDeclinedMsg';
    public const TYPE_WAR_SURRENDER_OFFER_MSG = 'WarSurrenderOfferMsg';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSenderTypeAllowableValues()
    {
        return [
            self::SENDER_TYPE_CHARACTER,
            self::SENDER_TYPE_CORPORATION,
            self::SENDER_TYPE_ALLIANCE,
            self::SENDER_TYPE_FACTION,
            self::SENDER_TYPE_OTHER,
            self::SENDER_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCEPTED_ALLY,
            self::TYPE_ACCEPTED_SURRENDER,
            self::TYPE_AGENT_RETIRED_TRIGRAVIAN,
            self::TYPE_ALL_ANCHORING_MSG,
            self::TYPE_ALL_MAINTENANCE_BILL_MSG,
            self::TYPE_ALL_STRUC_INVULNERABLE_MSG,
            self::TYPE_ALL_STRUCT_VULNERABLE_MSG,
            self::TYPE_ALL_WAR_CORP_JOINED_ALLIANCE_MSG,
            self::TYPE_ALL_WAR_DECLARED_MSG,
            self::TYPE_ALL_WAR_INVALIDATED_MSG,
            self::TYPE_ALL_WAR_RETRACTED_MSG,
            self::TYPE_ALL_WAR_SURRENDER_MSG,
            self::TYPE_ALLIANCE_CAPITAL_CHANGED,
            self::TYPE_ALLIANCE_WAR_DECLARED_V2,
            self::TYPE_ALLY_CONTRACT_CANCELLED,
            self::TYPE_ALLY_JOINED_WAR_AGGRESSOR_MSG,
            self::TYPE_ALLY_JOINED_WAR_ALLY_MSG,
            self::TYPE_ALLY_JOINED_WAR_DEFENDER_MSG,
            self::TYPE_BATTLE_PUNISH_FRIENDLY_FIRE,
            self::TYPE_BILL_OUT_OF_MONEY_MSG,
            self::TYPE_BILL_PAID_CORP_ALL_MSG,
            self::TYPE_BOUNTY_CLAIM_MSG,
            self::TYPE_BOUNTY_ESS_SHARED,
            self::TYPE_BOUNTY_ESS_TAKEN,
            self::TYPE_BOUNTY_PLACED_ALLIANCE,
            self::TYPE_BOUNTY_PLACED_CHAR,
            self::TYPE_BOUNTY_PLACED_CORP,
            self::TYPE_BOUNTY_YOUR_BOUNTY_CLAIMED,
            self::TYPE_BUDDY_CONNECT_CONTACT_ADD,
            self::TYPE_CHAR_APP_ACCEPT_MSG,
            self::TYPE_CHAR_APP_REJECT_MSG,
            self::TYPE_CHAR_APP_WITHDRAW_MSG,
            self::TYPE_CHAR_LEFT_CORP_MSG,
            self::TYPE_CHAR_MEDAL_MSG,
            self::TYPE_CHAR_TERMINATION_MSG,
            self::TYPE_CLONE_ACTIVATION_MSG,
            self::TYPE_CLONE_ACTIVATION_MSG2,
            self::TYPE_CLONE_MOVED_MSG,
            self::TYPE_CLONE_REVOKED_MSG1,
            self::TYPE_CLONE_REVOKED_MSG2,
            self::TYPE_COMBAT_OPERATION_FINISHED,
            self::TYPE_CONTACT_ADD,
            self::TYPE_CONTACT_EDIT,
            self::TYPE_CONTAINER_PASSWORD_MSG,
            self::TYPE_CONTRACT_REGION_CHANGED_TO_POCHVEN,
            self::TYPE_CORP_ALL_BILL_MSG,
            self::TYPE_CORP_APP_ACCEPT_MSG,
            self::TYPE_CORP_APP_INVITED_MSG,
            self::TYPE_CORP_APP_NEW_MSG,
            self::TYPE_CORP_APP_REJECT_CUSTOM_MSG,
            self::TYPE_CORP_APP_REJECT_MSG,
            self::TYPE_CORP_BECAME_WAR_ELIGIBLE,
            self::TYPE_CORP_DIVIDEND_MSG,
            self::TYPE_CORP_FRIENDLY_FIRE_DISABLE_TIMER_COMPLETED,
            self::TYPE_CORP_FRIENDLY_FIRE_DISABLE_TIMER_STARTED,
            self::TYPE_CORP_FRIENDLY_FIRE_ENABLE_TIMER_COMPLETED,
            self::TYPE_CORP_FRIENDLY_FIRE_ENABLE_TIMER_STARTED,
            self::TYPE_CORP_KICKED,
            self::TYPE_CORP_LIQUIDATION_MSG,
            self::TYPE_CORP_NEW_CEO_MSG,
            self::TYPE_CORP_NEWS_MSG,
            self::TYPE_CORP_NO_LONGER_WAR_ELIGIBLE,
            self::TYPE_CORP_OFFICE_EXPIRATION_MSG,
            self::TYPE_CORP_STRUCT_LOST_MSG,
            self::TYPE_CORP_TAX_CHANGE_MSG,
            self::TYPE_CORP_VOTE_CEO_REVOKED_MSG,
            self::TYPE_CORP_VOTE_MSG,
            self::TYPE_CORP_WAR_DECLARED_MSG,
            self::TYPE_CORP_WAR_DECLARED_V2,
            self::TYPE_CORP_WAR_FIGHTING_LEGAL_MSG,
            self::TYPE_CORP_WAR_INVALIDATED_MSG,
            self::TYPE_CORP_WAR_RETRACTED_MSG,
            self::TYPE_CORP_WAR_SURRENDER_MSG,
            self::TYPE_CORPORATION_GOAL_CLOSED,
            self::TYPE_CORPORATION_GOAL_COMPLETED,
            self::TYPE_CORPORATION_GOAL_CREATED,
            self::TYPE_CORPORATION_GOAL_EXPIRED,
            self::TYPE_CORPORATION_GOAL_LIMIT_REACHED,
            self::TYPE_CORPORATION_GOAL_NAME_CHANGE,
            self::TYPE_CORPORATION_LEFT,
            self::TYPE_CUSTOMS_MSG,
            self::TYPE_DAILY_ITEM_REWARD_AUTO_CLAIMED,
            self::TYPE_DECLARE_WAR,
            self::TYPE_DISTRICT_ATTACKED,
            self::TYPE_DUST_APP_ACCEPTED_MSG,
            self::TYPE_ESS_MAIN_BANK_LINK,
            self::TYPE_ENTOSIS_CAPTURE_STARTED,
            self::TYPE_EXPERT_SYSTEM_EXPIRED,
            self::TYPE_EXPERT_SYSTEM_EXPIRY_IMMINENT,
            self::TYPE_FW_ALLIANCE_KICK_MSG,
            self::TYPE_FW_ALLIANCE_WARNING_MSG,
            self::TYPE_FW_CHAR_KICK_MSG,
            self::TYPE_FW_CHAR_RANK_GAIN_MSG,
            self::TYPE_FW_CHAR_RANK_LOSS_MSG,
            self::TYPE_FW_CHAR_WARNING_MSG,
            self::TYPE_FW_CORP_JOIN_MSG,
            self::TYPE_FW_CORP_KICK_MSG,
            self::TYPE_FW_CORP_LEAVE_MSG,
            self::TYPE_FW_CORP_WARNING_MSG,
            self::TYPE_FAC_WAR_CORP_JOIN_REQUEST_MSG,
            self::TYPE_FAC_WAR_CORP_JOIN_WITHDRAW_MSG,
            self::TYPE_FAC_WAR_CORP_LEAVE_REQUEST_MSG,
            self::TYPE_FAC_WAR_CORP_LEAVE_WITHDRAW_MSG,
            self::TYPE_FAC_WAR_LP_DISQUALIFIED_EVENT,
            self::TYPE_FAC_WAR_LP_DISQUALIFIED_KILL,
            self::TYPE_FAC_WAR_LP_PAYOUT_EVENT,
            self::TYPE_FAC_WAR_LP_PAYOUT_KILL,
            self::TYPE_FREELANCE_PROJECT_CLOSED,
            self::TYPE_FREELANCE_PROJECT_COMPLETED,
            self::TYPE_FREELANCE_PROJECT_CREATED,
            self::TYPE_FREELANCE_PROJECT_EXPIRED,
            self::TYPE_FREELANCE_PROJECT_LIMIT_REACHED,
            self::TYPE_FREELANCE_PROJECT_PARTICIPANT_KICKED,
            self::TYPE_GAME_TIME_ADDED,
            self::TYPE_GAME_TIME_RECEIVED,
            self::TYPE_GAME_TIME_SENT,
            self::TYPE_GIFT_RECEIVED,
            self::TYPE_I_HUB_DESTROYED_BY_BILL_FAILURE,
            self::TYPE_INCURSION_COMPLETED_MSG,
            self::TYPE_INDUSTRY_OPERATION_FINISHED,
            self::TYPE_INDUSTRY_TEAM_AUCTION_LOST,
            self::TYPE_INDUSTRY_TEAM_AUCTION_WON,
            self::TYPE_INFRASTRUCTURE_HUB_BILL_ABOUT_TO_EXPIRE,
            self::TYPE_INSURANCE_EXPIRATION_MSG,
            self::TYPE_INSURANCE_FIRST_SHIP_MSG,
            self::TYPE_INSURANCE_INVALIDATED_MSG,
            self::TYPE_INSURANCE_ISSUED_MSG,
            self::TYPE_INSURANCE_PAYOUT_MSG,
            self::TYPE_INVASION_COMPLETED_MSG,
            self::TYPE_INVASION_SYSTEM_LOGIN,
            self::TYPE_INVASION_SYSTEM_START,
            self::TYPE_JUMP_CLONE_DELETED_MSG1,
            self::TYPE_JUMP_CLONE_DELETED_MSG2,
            self::TYPE_KILL_REPORT_FINAL_BLOW,
            self::TYPE_KILL_REPORT_VICTIM,
            self::TYPE_KILL_RIGHT_AVAILABLE,
            self::TYPE_KILL_RIGHT_AVAILABLE_OPEN,
            self::TYPE_KILL_RIGHT_EARNED,
            self::TYPE_KILL_RIGHT_UNAVAILABLE,
            self::TYPE_KILL_RIGHT_UNAVAILABLE_OPEN,
            self::TYPE_KILL_RIGHT_USED,
            self::TYPE_LP_AUTO_REDEEMED,
            self::TYPE_LOCATE_CHAR_MSG,
            self::TYPE_MADE_WAR_MUTUAL,
            self::TYPE_MERC_OFFER_RETRACTED_MSG,
            self::TYPE_MERC_OFFERED_NEGOTIATION_MSG,
            self::TYPE_MERCENARY_DEN_ATTACKED,
            self::TYPE_MERCENARY_DEN_NEW_MTO,
            self::TYPE_MERCENARY_DEN_REINFORCED,
            self::TYPE_MISSION_CANCELED_TRIGLAVIAN,
            self::TYPE_MISSION_OFFER_EXPIRATION_MSG,
            self::TYPE_MISSION_TIMEOUT_MSG,
            self::TYPE_MOONMINING_AUTOMATIC_FRACTURE,
            self::TYPE_MOONMINING_EXTRACTION_CANCELLED,
            self::TYPE_MOONMINING_EXTRACTION_FINISHED,
            self::TYPE_MOONMINING_EXTRACTION_STARTED,
            self::TYPE_MOONMINING_LASER_FIRED,
            self::TYPE_MUTUAL_WAR_EXPIRED,
            self::TYPE_MUTUAL_WAR_INVITE_ACCEPTED,
            self::TYPE_MUTUAL_WAR_INVITE_REJECTED,
            self::TYPE_MUTUAL_WAR_INVITE_SENT,
            self::TYPE_NPC_STANDINGS_GAINED,
            self::TYPE_NPC_STANDINGS_LOST,
            self::TYPE_OFFER_TO_ALLY_RETRACTED,
            self::TYPE_OFFERED_SURRENDER,
            self::TYPE_OFFERED_TO_ALLY,
            self::TYPE_OFFICE_LEASE_CANCELED_INSUFFICIENT_STANDINGS,
            self::TYPE_OLD_LSC_MESSAGES,
            self::TYPE_OPERATION_FINISHED,
            self::TYPE_ORBITAL_ATTACKED,
            self::TYPE_ORBITAL_REINFORCED,
            self::TYPE_OWNERSHIP_TRANSFERRED,
            self::TYPE_RAFFLE_CREATED,
            self::TYPE_RAFFLE_EXPIRED,
            self::TYPE_RAFFLE_FINISHED,
            self::TYPE_REIMBURSEMENT_MSG,
            self::TYPE_RESEARCH_MISSION_AVAILABLE_MSG,
            self::TYPE_RETRACTS_WAR,
            self::TYPE_SP_AUTO_REDEEMED,
            self::TYPE_SEASONAL_CHALLENGE_COMPLETED,
            self::TYPE_SKIN_SEQUENCING_COMPLETED,
            self::TYPE_SKYHOOK_DEPLOYED,
            self::TYPE_SKYHOOK_DESTROYED,
            self::TYPE_SKYHOOK_LOST_SHIELDS,
            self::TYPE_SKYHOOK_ONLINE,
            self::TYPE_SKYHOOK_UNDER_ATTACK,
            self::TYPE_SOV_ALL_CLAIM_AQUIRED_MSG,
            self::TYPE_SOV_ALL_CLAIM_LOST_MSG,
            self::TYPE_SOV_COMMAND_NODE_EVENT_STARTED,
            self::TYPE_SOV_CORP_BILL_LATE_MSG,
            self::TYPE_SOV_CORP_CLAIM_FAIL_MSG,
            self::TYPE_SOV_DISRUPTOR_MSG,
            self::TYPE_SOV_STATION_ENTERED_FREEPORT,
            self::TYPE_SOV_STRUCTURE_DESTROYED,
            self::TYPE_SOV_STRUCTURE_REINFORCED,
            self::TYPE_SOV_STRUCTURE_SELF_DESTRUCT_CANCEL,
            self::TYPE_SOV_STRUCTURE_SELF_DESTRUCT_FINISHED,
            self::TYPE_SOV_STRUCTURE_SELF_DESTRUCT_REQUESTED,
            self::TYPE_SOVEREIGNTY_IH_DAMAGE_MSG,
            self::TYPE_SOVEREIGNTY_SBU_DAMAGE_MSG,
            self::TYPE_SOVEREIGNTY_TCU_DAMAGE_MSG,
            self::TYPE_STATION_AGGRESSION_MSG1,
            self::TYPE_STATION_AGGRESSION_MSG2,
            self::TYPE_STATION_CONQUER_MSG,
            self::TYPE_STATION_SERVICE_DISABLED,
            self::TYPE_STATION_SERVICE_ENABLED,
            self::TYPE_STATION_STATE_CHANGE_MSG,
            self::TYPE_STORY_LINE_MISSION_AVAILABLE_MSG,
            self::TYPE_STRUCTURE_ANCHORING,
            self::TYPE_STRUCTURE_COURIER_CONTRACT_CHANGED,
            self::TYPE_STRUCTURE_DESTROYED,
            self::TYPE_STRUCTURE_FUEL_ALERT,
            self::TYPE_STRUCTURE_IMPENDING_ABANDONMENT_ASSETS_AT_RISK,
            self::TYPE_STRUCTURE_ITEMS_DELIVERED,
            self::TYPE_STRUCTURE_ITEMS_MOVED_TO_SAFETY,
            self::TYPE_STRUCTURE_LOST_ARMOR,
            self::TYPE_STRUCTURE_LOST_SHIELDS,
            self::TYPE_STRUCTURE_LOW_REAGENTS_ALERT,
            self::TYPE_STRUCTURE_NO_REAGENTS_ALERT,
            self::TYPE_STRUCTURE_ONLINE,
            self::TYPE_STRUCTURE_PAINT_PURCHASED,
            self::TYPE_STRUCTURE_SERVICES_OFFLINE,
            self::TYPE_STRUCTURE_UNANCHORING,
            self::TYPE_STRUCTURE_UNDER_ATTACK,
            self::TYPE_STRUCTURE_WENT_HIGH_POWER,
            self::TYPE_STRUCTURE_WENT_LOW_POWER,
            self::TYPE_STRUCTURES_JOBS_CANCELLED,
            self::TYPE_STRUCTURES_JOBS_PAUSED,
            self::TYPE_STRUCTURES_REINFORCEMENT_CHANGED,
            self::TYPE_TOWER_ALERT_MSG,
            self::TYPE_TOWER_RESOURCE_ALERT_MSG,
            self::TYPE_TRANSACTION_REVERSAL_MSG,
            self::TYPE_TUTORIAL_MSG,
            self::TYPE_WAR_ADOPTED,
            self::TYPE_WAR_ALLY_INHERITED,
            self::TYPE_WAR_ALLY_OFFER_DECLINED_MSG,
            self::TYPE_WAR_CONCORD_INVALIDATES,
            self::TYPE_WAR_DECLARED,
            self::TYPE_WAR_ENDED_HQ_SECURITY_DROP,
            self::TYPE_WAR_HQ_REMOVED_FROM_SPACE,
            self::TYPE_WAR_INHERITED,
            self::TYPE_WAR_INVALID,
            self::TYPE_WAR_RETRACTED,
            self::TYPE_WAR_RETRACTED_BY_CONCORD,
            self::TYPE_WAR_SURRENDER_DECLINED_MSG,
            self::TYPE_WAR_SURRENDER_OFFER_MSG,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_read', $data ?? [], null);
        $this->setIfExists('notification_id', $data ?? [], null);
        $this->setIfExists('sender_id', $data ?? [], null);
        $this->setIfExists('sender_type', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['notification_id'] === null) {
            $invalidProperties[] = "'notification_id' can't be null";
        }
        if ($this->container['sender_id'] === null) {
            $invalidProperties[] = "'sender_id' can't be null";
        }
        if ($this->container['sender_type'] === null) {
            $invalidProperties[] = "'sender_type' can't be null";
        }
        $allowedValues = $this->getSenderTypeAllowableValues();
        if (!is_null($this->container['sender_type']) && !in_array($this->container['sender_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sender_type', must be one of '%s'",
                $this->container['sender_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_read
     *
     * @return bool|null
     */
    public function getIsRead()
    {
        return $this->container['is_read'];
    }

    /**
     * Sets is_read
     *
     * @param bool|null $is_read is_read
     *
     * @return self
     */
    public function setIsRead($is_read)
    {
        if (is_null($is_read)) {
            throw new \InvalidArgumentException('non-nullable is_read cannot be null');
        }
        $this->container['is_read'] = $is_read;

        return $this;
    }

    /**
     * Gets notification_id
     *
     * @return int
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param int $notification_id notification_id
     *
     * @return self
     */
    public function setNotificationId($notification_id)
    {
        if (is_null($notification_id)) {
            throw new \InvalidArgumentException('non-nullable notification_id cannot be null');
        }
        $this->container['notification_id'] = $notification_id;

        return $this;
    }

    /**
     * Gets sender_id
     *
     * @return int
     */
    public function getSenderId()
    {
        return $this->container['sender_id'];
    }

    /**
     * Sets sender_id
     *
     * @param int $sender_id sender_id
     *
     * @return self
     */
    public function setSenderId($sender_id)
    {
        if (is_null($sender_id)) {
            throw new \InvalidArgumentException('non-nullable sender_id cannot be null');
        }
        $this->container['sender_id'] = $sender_id;

        return $this;
    }

    /**
     * Gets sender_type
     *
     * @return string
     */
    public function getSenderType()
    {
        return $this->container['sender_type'];
    }

    /**
     * Sets sender_type
     *
     * @param string $sender_type sender_type
     *
     * @return self
     */
    public function setSenderType($sender_type)
    {
        if (is_null($sender_type)) {
            throw new \InvalidArgumentException('non-nullable sender_type cannot be null');
        }
        $allowedValues = $this->getSenderTypeAllowableValues();
        if (!in_array($sender_type, $allowedValues, true)) {
            $sender_type = self::SENDER_TYPE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['sender_type'] = $sender_type;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            $type = self::TYPE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


